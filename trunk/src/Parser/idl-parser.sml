
(**********************************************************************
 *
 *  This file was automatically generated by ml-fred
 *  (Fri May  4 11:10:31 2001)
 *
 **********************************************************************)

structure IdlParser : Idl_PARSER_SIG = struct
 structure IdlLrVals = IdlLrValsFun (structure Token = LrParser.Token)
 structure IdlLex = IdlLexFun (structure Tokens = IdlLrVals.Tokens)
 structure IdlParser = Join (structure LrParser = LrParser
     structure ParserData = IdlLrVals.ParserData
     structure Lex = IdlLex)
 fun invoke (lexstream) = let
 val print_error = fn (s,i:int,_) =>
   raise IdlExn.Parser (concat [s," [line ",(Int.toString i),"]"])
 in IdlParser.parse(0,lexstream,print_error,()) end 
 fun parse (instream) = let
  val lexer = IdlParser.makeLexer (fn _ => getOpt(TextIO.inputLine instream, ""))
  val dummyEOF = IdlLrVals.Tokens.EOF(0,0)
  fun loop lexer = let
    val (result,lexer) = invoke lexer
    val (nextToken,lexer) = IdlParser.Stream.get lexer
  in if IdlParser.sameToken(nextToken,dummyEOF) then result
     else loop lexer
  end
 in 
   IdlLex.UserDeclarations.pos := 1;
   loop lexer
 end
end
