functor IdlLexFun (structure Tokens : Idl_TOKENS)=
   struct
    structure UserDeclarations =
      struct

(**********************************************************************
 *
 *  This file was automatically generated by ml-fred
 *  (Fri May  4 11:10:31 2001)
 *
 **********************************************************************)

structure Tokens = Tokens
type pos = int
type svalue = Tokens.svalue
type ('a,'b) token = ('a,'b) Tokens.token
type lexresult = (svalue,pos) token
structure Keywords = struct
  type pos = int
  type token = (svalue,pos) Tokens.token
  fun ident (a,p1,p2) = Tokens.ID (a,p1,p2)
  fun mkKW (kw,tk) = (kw,fn (p1:pos,p2:pos) => tk (p1,p2))
  val keywords = map mkKW [("import", Tokens.KW_import),("const", Tokens.KW_const),("typedef", Tokens.KW_typedef),("switch", Tokens.KW_switch),("case", Tokens.KW_case),("default", Tokens.KW_default),("enum", Tokens.KW_enum),("struct", Tokens.KW_struct),("union", Tokens.KW_union),("float", Tokens.KW_float),("double", Tokens.KW_double),("hyper", Tokens.KW_hyper),("unsigned", Tokens.KW_unsigned),("int", Tokens.KW_int),("long", Tokens.KW_long),("short", Tokens.KW_short),("small", Tokens.KW_small),("char", Tokens.KW_char),("boolean", Tokens.KW_boolean),("byte", Tokens.KW_byte),("void", Tokens.KW_void),("wchar_t", Tokens.KW_wchar_t),("TRUE", Tokens.KW_TRUE),("FALSE", Tokens.KW_FALSE),("NULL", Tokens.KW_NULL),("string", Tokens.KW_string),("size_is", Tokens.KW_size_is),("ref", Tokens.KW_ref),("unique", Tokens.KW_unique),("ptr", Tokens.KW_ptr),("in", Tokens.KW_in),("out", Tokens.KW_out),("sml_structure", Tokens.KW_sml_structure),("sml_signature", Tokens.KW_sml_signature),("clib_name", Tokens.KW_clib_name),("clib_date", Tokens.KW_clib_date),("clib_version", Tokens.KW_clib_version),("sml_type", Tokens.KW_sml_type),("sml_value", Tokens.KW_sml_value),("sml_context", Tokens.KW_sml_context),("exclude", Tokens.KW_exclude),("abstract", Tokens.KW_abstract),("cpp_quote", Tokens.KW_cpp_quote),("pre", Tokens.KW_pre),("post", Tokens.KW_post),("call", Tokens.KW_call),("sml_int", Tokens.KW_sml_int),("sml_word", Tokens.KW_sml_word),("error_status_t", Tokens.KW_error_status_t),("ISO_LATIN1", Tokens.KW_ISO_LATIN1),("ISO_MULTILINGUAL", Tokens.KW_ISO_MULTILINGUAL),("ISO_UCS", Tokens.KW_ISO_UCS),("idempotent", Tokens.KW_idempotent),("broadcast", Tokens.KW_broadcast),("maybe", Tokens.KW_maybe),("reflect_deletions", Tokens.KW_reflect_deletions),("ignore", Tokens.KW_ignore),("context_handle", Tokens.KW_context_handle),("first_is", Tokens.KW_first_is),("last_is", Tokens.KW_last_is),("length_is", Tokens.KW_length_is),("min_is", Tokens.KW_min_is),("max_is", Tokens.KW_max_is),("transmit_as", Tokens.KW_transmit_as),("handle", Tokens.KW_handle),("switch_type", Tokens.KW_switch_type),("switch_is", Tokens.KW_switch_is),("handle_t", Tokens.KW_handle_t)]
end
structure K = KeywordFn (Keywords)
(*
 * line number
 *)
val pos = ref 1
fun error (s,i : int,_) = raise IdlExn.Lexer (concat [s," [line ",(Int.toString i),"]"])
fun eof () = Tokens.EOF (!pos,!pos)
val comment0 = ref (0)
val comment1 = ref (0)

end (* end of user routines *)
exception LexError (* raised if illegal leaf action tried *)
structure Internal =
	struct

datatype yyfinstate = N of int
type statedata = {fin : yyfinstate list, trans: string}
(* transition & final state table *)
val tab = let
val s = [ 
 (0, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (1, 
"\007\007\007\007\007\007\007\007\007\052\055\007\007\054\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\052\007\047\007\007\007\007\046\045\044\043\007\042\041\039\036\
\\032\029\029\029\029\029\029\029\029\029\028\027\007\026\007\007\
\\007\014\014\014\014\014\014\012\012\012\012\012\012\012\012\012\
\\012\012\012\012\012\012\012\012\012\012\012\025\007\024\007\012\
\\007\014\014\014\014\014\014\012\012\012\012\012\012\012\012\012\
\\012\012\012\012\012\012\012\012\012\012\012\011\007\010\008\007\
\\007"
),
 (3, 
"\056\056\056\056\056\056\056\056\056\056\058\056\056\057\056\056\
\\056\056\056\056\056\056\056\056\056\056\056\056\056\056\056\056\
\\056\056\056\056\056\056\056\056\056\056\056\056\056\056\056\056\
\\056\056\056\056\056\056\056\056\056\056\056\056\056\056\056\056\
\\056\056\056\056\056\056\056\056\056\056\056\056\056\056\056\056\
\\056\056\056\056\056\056\056\056\056\056\056\056\056\056\056\056\
\\056\056\056\056\056\056\056\056\056\056\056\056\056\056\056\056\
\\056\056\056\056\056\056\056\056\056\056\056\056\056\056\056\056\
\\056"
),
 (5, 
"\059\059\059\059\059\059\059\059\059\059\065\059\059\064\059\059\
\\059\059\059\059\059\059\059\059\059\059\059\059\059\059\059\059\
\\059\059\059\059\059\059\059\059\059\059\062\059\059\059\059\060\
\\059\059\059\059\059\059\059\059\059\059\059\059\059\059\059\059\
\\059\059\059\059\059\059\059\059\059\059\059\059\059\059\059\059\
\\059\059\059\059\059\059\059\059\059\059\059\059\059\059\059\059\
\\059\059\059\059\059\059\059\059\059\059\059\059\059\059\059\059\
\\059\059\059\059\059\059\059\059\059\059\059\059\059\059\059\059\
\\059"
),
 (8, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (12, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\013\013\013\013\013\013\013\013\013\013\000\000\000\000\000\000\
\\000\013\013\013\013\013\013\013\013\013\013\013\013\013\013\013\
\\013\013\013\013\013\013\013\013\013\013\013\000\000\000\000\013\
\\000\013\013\013\013\013\013\013\013\013\013\013\013\013\013\013\
\\013\013\013\013\013\013\013\013\013\013\013\000\000\000\000\000\
\\000"
),
 (14, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\
\\015\015\015\015\015\015\015\015\015\015\000\000\000\000\000\000\
\\000\015\015\015\015\015\015\013\013\013\013\013\013\013\013\013\
\\013\013\013\013\013\013\013\013\013\013\013\000\000\000\000\013\
\\000\015\015\015\015\015\015\013\013\013\013\013\013\013\013\013\
\\013\013\013\013\013\013\013\013\013\013\013\000\000\000\000\000\
\\000"
),
 (16, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\017\017\017\017\017\017\017\017\017\017\000\000\000\000\000\000\
\\000\017\017\017\017\017\017\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\017\017\017\017\017\017\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (17, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\018\000\000\
\\017\017\017\017\017\017\017\017\017\017\000\000\000\000\000\000\
\\000\017\017\017\017\017\017\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\017\017\017\017\017\017\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (18, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\019\019\019\019\019\019\019\019\019\019\000\000\000\000\000\000\
\\000\019\019\019\019\019\019\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\019\019\019\019\019\019\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (19, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\020\000\000\
\\019\019\019\019\019\019\019\019\019\019\000\000\000\000\000\000\
\\000\019\019\019\019\019\019\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\019\019\019\019\019\019\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (20, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\021\021\021\021\021\021\021\021\021\021\000\000\000\000\000\000\
\\000\021\021\021\021\021\021\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\021\021\021\021\021\021\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (21, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\022\000\000\
\\021\021\021\021\021\021\021\021\021\021\000\000\000\000\000\000\
\\000\021\021\021\021\021\021\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\021\021\021\021\021\021\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (22, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\023\023\023\023\023\023\023\023\023\023\000\000\000\000\000\000\
\\000\023\023\023\023\023\023\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\023\023\023\023\023\023\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (29, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\
\\031\031\031\031\031\031\031\031\031\031\000\000\000\000\000\000\
\\000\030\030\030\030\030\030\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\030\030\030\030\030\030\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (30, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\
\\030\030\030\030\030\030\030\030\030\030\000\000\000\000\000\000\
\\000\030\030\030\030\030\030\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\030\030\030\030\030\030\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (32, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\
\\031\031\031\031\031\031\031\031\031\031\000\000\000\000\000\000\
\\000\030\030\030\030\030\030\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\030\030\030\030\030\030\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\033\000\000\000\000\000\000\000\000\
\\000"
),
 (33, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\034\000\000\000\000\000\000\000\
\\000"
),
 (34, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\035\035\035\035\035\035\035\035\035\035\000\000\000\000\000\000\
\\000\035\035\035\035\035\035\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\035\035\035\035\035\035\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (36, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\038\000\000\000\000\037\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (39, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\040\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (47, 
"\048\048\048\048\048\048\048\048\048\048\048\048\048\048\048\048\
\\048\048\048\048\048\048\048\048\048\048\048\048\048\048\048\048\
\\048\048\051\048\048\048\048\048\048\048\048\048\048\048\048\048\
\\048\048\048\048\048\048\048\048\048\048\048\048\048\048\048\048\
\\048\048\048\048\048\048\048\048\048\048\048\048\048\048\048\048\
\\048\048\048\048\048\048\048\048\048\048\048\048\049\048\048\048\
\\048\048\048\048\048\048\048\048\048\048\048\048\048\048\048\048\
\\048\048\048\048\048\048\048\048\048\048\048\048\048\048\048\048\
\\048"
),
 (49, 
"\048\048\048\048\048\048\048\048\048\048\048\048\048\048\048\048\
\\048\048\048\048\048\048\048\048\048\048\048\048\048\048\048\048\
\\048\048\050\048\048\048\048\048\048\048\048\048\048\048\048\048\
\\048\048\048\048\048\048\048\048\048\048\048\048\048\048\048\048\
\\048\048\048\048\048\048\048\048\048\048\048\048\048\048\048\048\
\\048\048\048\048\048\048\048\048\048\048\048\048\049\048\048\048\
\\048\048\048\048\048\048\048\048\048\048\048\048\048\048\048\048\
\\048\048\048\048\048\048\048\048\048\048\048\048\048\048\048\048\
\\048"
),
 (52, 
"\000\000\000\000\000\000\000\000\000\053\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\053\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (54, 
"\000\000\000\000\000\000\000\000\000\000\055\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (57, 
"\000\000\000\000\000\000\000\000\000\000\058\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (60, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\061\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (62, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\063\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (64, 
"\000\000\000\000\000\000\000\000\000\000\065\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
(0, "")]
fun f x = x 
val s = map f (rev (tl (rev s))) 
exception LexHackingError 
fun look ((j,x)::r, i) = if i = j then x else look(r, i) 
  | look ([], i) = raise LexHackingError
fun g {fin=x, trans=i} = {fin=x, trans=look(s,i)} 
in Vector.fromList(map g 
[{fin = [], trans = 0},
{fin = [], trans = 1},
{fin = [], trans = 1},
{fin = [], trans = 3},
{fin = [], trans = 3},
{fin = [], trans = 5},
{fin = [], trans = 5},
{fin = [(N 103)], trans = 0},
{fin = [(N 103)], trans = 8},
{fin = [(N 17)], trans = 8},
{fin = [(N 57),(N 103)], trans = 0},
{fin = [(N 55),(N 103)], trans = 0},
{fin = [(N 75),(N 103)], trans = 12},
{fin = [(N 75)], trans = 12},
{fin = [(N 75),(N 103)], trans = 14},
{fin = [(N 75)], trans = 14},
{fin = [], trans = 16},
{fin = [], trans = 17},
{fin = [], trans = 18},
{fin = [], trans = 19},
{fin = [], trans = 20},
{fin = [], trans = 21},
{fin = [], trans = 22},
{fin = [(N 38)], trans = 22},
{fin = [(N 53),(N 103)], trans = 0},
{fin = [(N 51),(N 103)], trans = 0},
{fin = [(N 67),(N 103)], trans = 0},
{fin = [(N 59),(N 103)], trans = 0},
{fin = [(N 61),(N 103)], trans = 0},
{fin = [(N 17),(N 103)], trans = 29},
{fin = [], trans = 30},
{fin = [(N 17)], trans = 29},
{fin = [(N 17),(N 103)], trans = 32},
{fin = [], trans = 33},
{fin = [], trans = 34},
{fin = [(N 23)], trans = 34},
{fin = [(N 103)], trans = 36},
{fin = [(N 78)], trans = 0},
{fin = [(N 88)], trans = 0},
{fin = [(N 43),(N 103)], trans = 39},
{fin = [(N 41)], trans = 0},
{fin = [(N 69),(N 103)], trans = 0},
{fin = [(N 45),(N 103)], trans = 0},
{fin = [(N 63),(N 103)], trans = 0},
{fin = [(N 49),(N 103)], trans = 0},
{fin = [(N 47),(N 103)], trans = 0},
{fin = [(N 65),(N 103)], trans = 0},
{fin = [(N 103)], trans = 47},
{fin = [], trans = 47},
{fin = [], trans = 49},
{fin = [(N 13)], trans = 47},
{fin = [(N 13)], trans = 0},
{fin = [(N 7),(N 103)], trans = 52},
{fin = [(N 7)], trans = 52},
{fin = [(N 4),(N 103)], trans = 54},
{fin = [(N 4)], trans = 0},
{fin = [(N 85),(N 103)], trans = 0},
{fin = [(N 83),(N 85),(N 103)], trans = 57},
{fin = [(N 83)], trans = 0},
{fin = [(N 101),(N 103)], trans = 0},
{fin = [(N 101),(N 103)], trans = 60},
{fin = [(N 91)], trans = 0},
{fin = [(N 101),(N 103)], trans = 62},
{fin = [(N 99)], trans = 0},
{fin = [(N 96),(N 101),(N 103)], trans = 64},
{fin = [(N 96)], trans = 0}])
end
structure StartStates =
	struct
	datatype yystartstate = STARTSTATE of int

(* start state definitions *)

val COMMENT0 = STARTSTATE 3;
val COMMENT1 = STARTSTATE 5;
val INITIAL = STARTSTATE 1;

end
type result = UserDeclarations.lexresult
	exception LexerError (* raised if illegal leaf action tried *)
end

fun makeLexer yyinput =
let	val yygone0=1
	val yyb = ref "\n" 		(* buffer *)
	val yybl = ref 1		(*buffer length *)
	val yybufpos = ref 1		(* location of next character to use *)
	val yygone = ref yygone0	(* position in file of beginning of buffer *)
	val yydone = ref false		(* eof found yet? *)
	val yybegin = ref 1		(*Current 'start state' for lexer *)

	val YYBEGIN = fn (Internal.StartStates.STARTSTATE x) =>
		 yybegin := x

fun lex () : Internal.result =
let fun continue() = lex() in
  let fun scan (s,AcceptingLeaves : Internal.yyfinstate list list,l,i0) =
	let fun action (i,nil) = raise LexError
	| action (i,nil::l) = action (i-1,l)
	| action (i,(node::acts)::l) =
		case node of
		    Internal.N yyk => 
			(let val yytext = substring(!yyb,i0,i-i0)
			     val yypos = i0+ !yygone
			open UserDeclarations Internal.StartStates
 in (yybufpos := i; case yyk of 

			(* Application actions *)

  101 => (continue ())
| 103 => (error ("Bad character "^yytext,!pos,!pos))
| 13 => (Tokens.STRING (case (fn x => SOME (x)) (yytext) of NONE => error ("cannot convert string",!pos,!pos) | SOME (v) => v,!pos,!pos))
| 17 => (Tokens.INT32 (case (Int32.fromString) (yytext) of NONE => error ("cannot convert int32",!pos,!pos) | SOME (v) => v,!pos,!pos))
| 23 => (Tokens.WORD32 (case (Word32.fromString) (yytext) of NONE => error ("cannot convert word32",!pos,!pos) | SOME (v) => v,!pos,!pos))
| 38 => (Tokens.UUID (case (fn x => SOME (x)) (yytext) of NONE => error ("cannot convert string",!pos,!pos) | SOME (v) => v,!pos,!pos))
| 4 => (pos := (!pos)+1;continue())
| 41 => (Tokens.DDOT (!pos,!pos))
| 43 => (Tokens.DOT (!pos,!pos))
| 45 => (Tokens.COMMA (!pos,!pos))
| 47 => (Tokens.LPAREN (!pos,!pos))
| 49 => (Tokens.RPAREN (!pos,!pos))
| 51 => (Tokens.LBRACK (!pos,!pos))
| 53 => (Tokens.RBRACK (!pos,!pos))
| 55 => (Tokens.LBRACE (!pos,!pos))
| 57 => (Tokens.RBRACE (!pos,!pos))
| 59 => (Tokens.SEMI (!pos,!pos))
| 61 => (Tokens.COLON (!pos,!pos))
| 63 => (Tokens.ASTERISK (case (fn x => SOME (x)) (yytext) of NONE => error ("cannot convert string",!pos,!pos) | SOME (v) => v,!pos,!pos))
| 65 => (Tokens.QUOTE (!pos,!pos))
| 67 => (Tokens.EQSIGN (!pos,!pos))
| 69 => (Tokens.DASH (!pos,!pos))
| 7 => (continue())
| 75 => (K.keyword (yytext,!pos,!pos))
| 78 => (YYBEGIN COMMENT0; continue ())
| 83 => (YYBEGIN INITIAL;pos := (!pos)+1; continue())
| 85 => (continue ())
| 88 => (YYBEGIN COMMENT1; comment1 := 1; continue ())
| 91 => (comment1 := (!comment1)+1; continue ())
| 96 => (pos := (!pos)+1; continue ())
| 99 => (comment1 := (!comment1)-1; if (!comment1)=0 then (YYBEGIN INITIAL; continue ())else continue ())
| _ => raise Internal.LexerError

		) end )

	val {fin,trans} = Vector.sub(Internal.tab, s)
	val NewAcceptingLeaves = fin::AcceptingLeaves
	in if l = !yybl then
	     if trans = #trans(Vector.sub(Internal.tab,0))
	       then action(l,NewAcceptingLeaves
) else	    let val newchars= if !yydone then "" else yyinput 1024
	    in if (size newchars)=0
		  then (yydone := true;
		        if (l=i0) then UserDeclarations.eof ()
		                  else action(l,NewAcceptingLeaves))
		  else (if i0=l then yyb := newchars
		     else yyb := substring(!yyb,i0,l-i0)^newchars;
		     yygone := !yygone+i0;
		     yybl := size (!yyb);
		     scan (s,AcceptingLeaves,l-i0,0))
	    end
	  else let val NewChar = Char.ord(String.sub(!yyb,l))
		val NewState = if NewChar<128 then Char.ord(String.sub(trans,NewChar)) else Char.ord(String.sub(trans,128))
		in if NewState=0 then action(l,NewAcceptingLeaves)
		else scan(NewState,NewAcceptingLeaves,l+1,i0)
	end
	end
(*
	val start= if substring(!yyb,!yybufpos-1,1)="\n"
then !yybegin+1 else !yybegin
*)
	in scan(!yybegin (* start *),nil,!yybufpos,!yybufpos)
    end
end
  in lex
  end
end
