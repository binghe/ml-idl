functor IdlLrValsFun (structure Token : TOKEN) : Idl_LRVALS = 
struct
structure ParserData=
struct
structure Header = 
struct

(**********************************************************************
 *
 *  This file was automatically generated by ml-fred
 *  (Fri May  4 11:10:31 2001)
 *
 **********************************************************************)

structure P = IdlParseTree


end
structure LrTable = Token.LrTable
structure Token = Token
local open LrTable in 
val table=let val actionRows =
"\
\\001\000\001\000\000\000\000\000\
\\001\000\002\000\049\000\012\000\084\000\028\000\083\000\029\000\082\000\
\\030\000\081\000\031\000\042\000\032\000\041\000\033\000\040\000\
\\034\000\039\000\035\000\038\000\036\000\037\000\037\000\036\000\
\\038\000\035\000\039\000\034\000\040\000\033\000\041\000\032\000\
\\042\000\031\000\043\000\030\000\060\000\024\000\068\000\022\000\
\\069\000\021\000\070\000\020\000\071\000\019\000\072\000\018\000\
\\073\000\017\000\089\000\016\000\000\000\
\\001\000\002\000\049\000\012\000\181\000\016\000\091\001\028\000\083\000\
\\029\000\082\000\030\000\081\000\031\000\042\000\032\000\041\000\
\\033\000\040\000\034\000\039\000\035\000\038\000\036\000\037\000\
\\037\000\036\000\038\000\035\000\039\000\034\000\040\000\033\000\
\\041\000\032\000\042\000\031\000\043\000\030\000\060\000\024\000\
\\068\000\022\000\069\000\021\000\070\000\020\000\071\000\019\000\
\\072\000\018\000\073\000\017\000\089\000\016\000\000\000\
\\001\000\002\000\049\000\012\000\181\000\028\000\083\000\029\000\082\000\
\\030\000\081\000\031\000\042\000\032\000\041\000\033\000\040\000\
\\034\000\039\000\035\000\038\000\036\000\037\000\037\000\036\000\
\\038\000\035\000\039\000\034\000\040\000\033\000\041\000\032\000\
\\042\000\031\000\043\000\030\000\060\000\024\000\068\000\022\000\
\\069\000\021\000\070\000\020\000\071\000\019\000\072\000\018\000\
\\073\000\017\000\089\000\016\000\000\000\
\\001\000\002\000\049\000\028\000\083\000\029\000\082\000\030\000\081\000\
\\031\000\042\000\032\000\041\000\033\000\040\000\034\000\039\000\
\\035\000\038\000\036\000\037\000\037\000\036\000\038\000\035\000\
\\039\000\034\000\040\000\033\000\041\000\032\000\042\000\031\000\
\\043\000\030\000\060\000\024\000\068\000\022\000\069\000\021\000\
\\070\000\020\000\071\000\019\000\072\000\018\000\073\000\017\000\
\\089\000\016\000\000\000\
\\001\000\002\000\049\000\031\000\042\000\032\000\041\000\033\000\040\000\
\\034\000\039\000\035\000\038\000\036\000\037\000\037\000\036\000\
\\038\000\035\000\039\000\034\000\040\000\033\000\041\000\032\000\
\\042\000\031\000\043\000\030\000\060\000\024\000\068\000\022\000\
\\069\000\021\000\070\000\020\000\071\000\019\000\072\000\018\000\
\\073\000\017\000\089\000\016\000\000\000\
\\001\000\002\000\051\000\000\000\
\\001\000\002\000\074\000\000\000\
\\001\000\002\000\074\000\014\000\135\000\025\000\134\000\000\000\
\\001\000\002\000\075\000\000\000\
\\001\000\002\000\075\000\014\000\136\000\000\000\
\\001\000\002\000\148\000\000\000\
\\001\000\002\000\186\000\010\000\185\000\000\000\
\\001\000\002\000\197\000\000\000\
\\001\000\002\000\242\000\034\000\241\000\035\000\038\000\036\000\037\000\
\\037\000\036\000\038\000\035\000\039\000\034\000\040\000\240\000\
\\043\000\030\000\068\000\022\000\069\000\021\000\000\000\
\\001\000\002\000\000\001\000\000\
\\001\000\002\000\022\001\003\000\021\001\004\000\020\001\005\000\019\001\
\\044\000\018\001\045\000\017\001\046\000\016\001\000\000\
\\001\000\002\000\024\001\000\000\
\\001\000\002\000\041\001\000\000\
\\001\000\002\000\056\001\004\000\020\001\005\000\019\001\013\000\055\001\
\\018\000\054\001\000\000\
\\001\000\002\000\056\001\004\000\020\001\005\000\019\001\018\000\054\001\000\000\
\\001\000\002\000\059\001\000\000\
\\001\000\002\000\075\001\018\000\074\001\000\000\
\\001\000\002\000\108\001\000\000\
\\001\000\002\000\128\001\014\000\127\001\000\000\
\\001\000\002\000\139\001\014\000\138\001\000\000\
\\001\000\003\000\092\000\000\000\
\\001\000\003\000\113\000\000\000\
\\001\000\003\000\114\000\000\000\
\\001\000\003\000\115\000\000\000\
\\001\000\003\000\116\000\000\000\
\\001\000\003\000\117\000\000\000\
\\001\000\003\000\118\000\000\000\
\\001\000\003\000\204\000\000\000\
\\001\000\003\000\207\000\000\000\
\\001\000\003\000\208\000\000\000\
\\001\000\003\000\209\000\000\000\
\\001\000\003\000\210\000\000\000\
\\001\000\004\000\020\001\005\000\019\001\000\000\
\\001\000\007\000\099\001\013\000\098\001\000\000\
\\001\000\010\000\053\000\000\000\
\\001\000\010\000\054\000\000\000\
\\001\000\010\000\055\000\000\000\
\\001\000\010\000\056\000\000\000\
\\001\000\010\000\057\000\000\000\
\\001\000\010\000\058\000\000\000\
\\001\000\010\000\112\000\000\000\
\\001\000\010\000\157\000\000\000\
\\001\000\010\000\158\000\000\000\
\\001\000\010\000\159\000\000\000\
\\001\000\010\000\160\000\000\000\
\\001\000\010\000\173\000\000\000\
\\001\000\010\000\191\000\000\000\
\\001\000\010\000\201\000\000\000\
\\001\000\010\000\202\000\000\000\
\\001\000\010\000\034\001\000\000\
\\001\000\010\000\035\001\000\000\
\\001\000\010\000\036\001\000\000\
\\001\000\010\000\037\001\000\000\
\\001\000\010\000\038\001\000\000\
\\001\000\010\000\039\001\000\000\
\\001\000\010\000\040\001\000\000\
\\001\000\010\000\044\001\000\000\
\\001\000\011\000\166\000\012\000\165\000\042\000\164\000\000\000\
\\001\000\011\000\167\000\000\000\
\\001\000\011\000\168\000\000\000\
\\001\000\011\000\169\000\000\000\
\\001\000\011\000\170\000\000\000\
\\001\000\011\000\171\000\000\000\
\\001\000\011\000\172\000\000\000\
\\001\000\011\000\211\000\000\000\
\\001\000\011\000\214\000\000\000\
\\001\000\011\000\026\001\000\000\
\\001\000\011\000\027\001\000\000\
\\001\000\011\000\028\001\000\000\
\\001\000\011\000\029\001\000\000\
\\001\000\011\000\057\001\000\000\
\\001\000\011\000\066\001\000\000\
\\001\000\011\000\067\001\000\000\
\\001\000\011\000\088\001\000\000\
\\001\000\011\000\100\001\000\000\
\\001\000\011\000\107\001\000\000\
\\001\000\011\000\109\001\000\000\
\\001\000\011\000\112\001\000\000\
\\001\000\011\000\115\001\000\000\
\\001\000\011\000\118\001\000\000\
\\001\000\011\000\121\001\000\000\
\\001\000\011\000\124\001\000\000\
\\001\000\011\000\130\001\000\000\
\\001\000\012\000\165\000\000\000\
\\001\000\012\000\177\000\000\000\
\\001\000\013\000\154\000\000\000\
\\001\000\013\000\198\000\000\000\
\\001\000\013\000\031\001\000\000\
\\001\000\013\000\043\001\000\000\
\\001\000\013\000\049\001\000\000\
\\001\000\013\000\154\001\000\000\
\\001\000\013\000\156\001\000\000\
\\001\000\014\000\137\000\000\000\
\\001\000\014\000\153\001\000\000\
\\001\000\014\000\158\001\000\000\
\\001\000\015\000\245\000\000\000\
\\001\000\015\000\248\000\000\000\
\\001\000\015\000\003\001\000\000\
\\001\000\015\000\004\001\000\000\
\\001\000\015\000\006\001\000\000\
\\001\000\015\000\168\001\000\000\
\\001\000\015\000\174\001\000\000\
\\001\000\015\000\179\001\000\000\
\\001\000\015\000\180\001\000\000\
\\001\000\016\000\050\000\000\000\
\\001\000\016\000\151\000\000\000\
\\001\000\016\000\161\000\000\000\
\\001\000\016\000\187\000\000\000\
\\001\000\016\000\231\000\000\000\
\\001\000\016\000\232\000\000\000\
\\001\000\016\000\233\000\000\000\
\\001\000\016\000\234\000\000\000\
\\001\000\016\000\235\000\000\000\
\\001\000\016\000\236\000\000\000\
\\001\000\016\000\249\000\000\000\
\\001\000\016\000\005\001\000\000\
\\001\000\016\000\068\001\000\000\
\\001\000\016\000\094\001\000\000\
\\001\000\016\000\101\001\000\000\
\\001\000\016\000\103\001\000\000\
\\001\000\016\000\104\001\000\000\
\\001\000\016\000\129\001\000\000\
\\001\000\017\000\169\001\000\000\
\\001\000\017\000\178\001\000\000\
\\001\000\017\000\184\001\000\000\
\\001\000\018\000\149\000\000\000\
\\001\000\020\000\203\000\000\000\
\\001\000\026\000\247\000\027\000\246\000\000\000\
\\001\000\026\000\152\001\027\000\151\001\000\000\
\\001\000\033\000\071\000\035\000\070\000\036\000\069\000\037\000\068\000\
\\038\000\067\000\039\000\066\000\043\000\065\000\000\000\
\\001\000\034\000\090\000\035\000\038\000\036\000\037\000\037\000\036\000\
\\038\000\035\000\039\000\089\000\040\000\088\000\042\000\087\000\
\\068\000\022\000\069\000\021\000\000\000\
\\001\000\035\000\070\000\036\000\069\000\037\000\068\000\038\000\067\000\000\000\
\\001\000\035\000\070\000\036\000\069\000\037\000\068\000\038\000\067\000\
\\039\000\066\000\043\000\065\000\000\000\
\\001\000\047\000\110\000\048\000\230\000\049\000\109\000\050\000\108\000\
\\051\000\107\000\052\000\229\000\053\000\228\000\059\000\106\000\
\\078\000\227\000\079\000\097\000\080\000\226\000\081\000\225\000\
\\082\000\224\000\083\000\223\000\084\000\222\000\088\000\221\000\000\000\
\\001\000\047\000\110\000\048\000\230\000\049\000\109\000\050\000\108\000\
\\051\000\107\000\059\000\106\000\078\000\227\000\079\000\097\000\
\\080\000\226\000\081\000\225\000\082\000\224\000\083\000\223\000\
\\084\000\222\000\088\000\221\000\000\000\
\\001\000\047\000\110\000\049\000\109\000\050\000\108\000\051\000\107\000\
\\059\000\106\000\061\000\105\000\065\000\104\000\066\000\103\000\
\\067\000\102\000\074\000\101\000\075\000\100\000\076\000\099\000\
\\077\000\098\000\079\000\097\000\000\000\
\\001\000\047\000\110\000\049\000\109\000\050\000\108\000\051\000\107\000\
\\059\000\106\000\062\000\147\000\063\000\146\000\079\000\097\000\
\\085\000\145\000\086\000\144\000\087\000\143\000\000\000\
\\000\002\000\000\
\\001\002\000\000\
\\002\002\000\000\
\\003\002\000\000\
\\004\002\000\000\
\\005\002\000\000\
\\006\002\000\000\
\\007\002\000\000\
\\008\002\000\000\
\\009\002\000\000\
\\010\002\000\000\
\\011\002\000\000\
\\012\002\000\000\
\\013\002\000\000\
\\014\002\000\000\
\\015\002\000\000\
\\016\002\018\000\150\000\000\000\
\\017\002\000\000\
\\018\002\000\000\
\\019\002\000\000\
\\020\002\000\000\
\\021\002\000\000\
\\022\002\000\000\
\\023\002\000\000\
\\024\002\000\000\
\\025\002\000\000\
\\026\002\000\000\
\\027\002\000\000\
\\028\002\000\000\
\\029\002\000\000\
\\030\002\000\000\
\\031\002\000\000\
\\032\002\000\000\
\\033\002\000\000\
\\034\002\000\000\
\\035\002\000\000\
\\036\002\000\000\
\\037\002\000\000\
\\038\002\000\000\
\\039\002\000\000\
\\040\002\000\000\
\\041\002\000\000\
\\042\002\000\000\
\\043\002\000\000\
\\044\002\010\000\112\000\012\000\255\000\000\000\
\\045\002\000\000\
\\046\002\000\000\
\\047\002\000\000\
\\048\002\000\000\
\\049\002\000\000\
\\050\002\000\000\
\\051\002\000\000\
\\052\002\034\000\073\000\035\000\072\000\000\000\
\\053\002\000\000\
\\054\002\035\000\126\000\000\000\
\\055\002\000\000\
\\056\002\035\000\125\000\000\000\
\\057\002\000\000\
\\058\002\000\000\
\\059\002\000\000\
\\060\002\000\000\
\\061\002\000\000\
\\062\002\034\000\064\000\035\000\063\000\000\000\
\\063\002\000\000\
\\064\002\034\000\062\000\035\000\061\000\000\000\
\\065\002\000\000\
\\066\002\034\000\060\000\035\000\059\000\000\000\
\\067\002\000\000\
\\068\002\000\000\
\\069\002\035\000\124\000\000\000\
\\070\002\000\000\
\\071\002\035\000\123\000\000\000\
\\072\002\000\000\
\\073\002\035\000\122\000\000\000\
\\074\002\000\000\
\\075\002\000\000\
\\076\002\035\000\121\000\000\000\
\\077\002\000\000\
\\078\002\035\000\120\000\000\000\
\\079\002\000\000\
\\080\002\035\000\119\000\000\000\
\\081\002\000\000\
\\082\002\000\000\
\\083\002\000\000\
\\084\002\000\000\
\\085\002\000\000\
\\086\002\000\000\
\\087\002\000\000\
\\088\002\000\000\
\\089\002\000\000\
\\090\002\014\000\129\000\000\000\
\\091\002\000\000\
\\092\002\000\000\
\\093\002\000\000\
\\094\002\014\000\128\000\025\000\127\000\000\000\
\\095\002\000\000\
\\096\002\000\000\
\\097\002\000\000\
\\098\002\000\000\
\\099\002\000\000\
\\100\002\000\000\
\\101\002\000\000\
\\102\002\000\000\
\\103\002\000\000\
\\104\002\000\000\
\\105\002\000\000\
\\106\002\000\000\
\\107\002\000\000\
\\108\002\000\000\
\\109\002\000\000\
\\110\002\000\000\
\\111\002\000\000\
\\112\002\000\000\
\\113\002\000\000\
\\114\002\000\000\
\\115\002\000\000\
\\116\002\000\000\
\\117\002\020\000\009\001\000\000\
\\118\002\000\000\
\\119\002\000\000\
\\120\002\000\000\
\\121\002\000\000\
\\122\002\000\000\
\\123\002\000\000\
\\124\002\000\000\
\\125\002\000\000\
\\126\002\000\000\
\\127\002\000\000\
\\128\002\000\000\
\\129\002\000\000\
\\130\002\000\000\
\\131\002\000\000\
\\132\002\000\000\
\\133\002\000\000\
\\134\002\000\000\
\\135\002\000\000\
\\136\002\000\000\
\\137\002\000\000\
\\138\002\000\000\
\\139\002\000\000\
\\140\002\000\000\
\\141\002\000\000\
\\142\002\000\000\
\\143\002\000\000\
\\144\002\000\000\
\\145\002\000\000\
\\146\002\000\000\
\\147\002\000\000\
\\148\002\000\000\
\\149\002\000\000\
\\150\002\000\000\
\\151\002\000\000\
\\152\002\000\000\
\\153\002\000\000\
\\154\002\000\000\
\\155\002\000\000\
\\156\002\000\000\
\\157\002\000\000\
\\158\002\000\000\
\\159\002\000\000\
\\160\002\000\000\
\\161\002\000\000\
\\162\002\000\000\
\\163\002\000\000\
\\164\002\000\000\
\\165\002\000\000\
\\166\002\000\000\
\\167\002\000\000\
\\168\002\002\000\049\000\012\000\048\000\022\000\047\000\023\000\046\000\
\\024\000\045\000\029\000\044\000\030\000\043\000\031\000\042\000\
\\032\000\041\000\033\000\040\000\034\000\039\000\035\000\038\000\
\\036\000\037\000\037\000\036\000\038\000\035\000\039\000\034\000\
\\040\000\033\000\041\000\032\000\042\000\031\000\043\000\030\000\
\\054\000\029\000\055\000\028\000\056\000\027\000\057\000\026\000\
\\058\000\025\000\060\000\024\000\064\000\023\000\068\000\022\000\
\\069\000\021\000\070\000\020\000\071\000\019\000\072\000\018\000\
\\073\000\017\000\089\000\016\000\000\000\
\\169\002\000\000\
\\170\002\000\000\
\\171\002\009\000\153\000\000\000\
\\172\002\000\000\
\\173\002\000\000\
\\174\002\009\000\200\000\000\000\
\\175\002\000\000\
\\176\002\000\000\
\\177\002\009\000\189\000\000\000\
\\178\002\000\000\
\\179\002\000\000\
\\180\002\009\000\156\000\000\000\
\\181\002\000\000\
\\182\002\018\000\133\000\000\000\
\\183\002\000\000\
\\184\002\000\000\
\\185\002\002\000\049\000\012\000\181\000\028\000\083\000\029\000\082\000\
\\030\000\081\000\031\000\042\000\032\000\041\000\033\000\040\000\
\\034\000\039\000\035\000\038\000\036\000\037\000\037\000\036\000\
\\038\000\035\000\039\000\034\000\040\000\033\000\041\000\032\000\
\\042\000\031\000\043\000\030\000\060\000\024\000\068\000\022\000\
\\069\000\021\000\070\000\020\000\071\000\019\000\072\000\018\000\
\\073\000\017\000\089\000\016\000\000\000\
\\186\002\000\000\
\\187\002\000\000\
\\188\002\009\000\008\001\000\000\
\\189\002\000\000\
\\190\002\000\000\
\\191\002\002\000\049\000\012\000\181\000\028\000\083\000\029\000\082\000\
\\030\000\081\000\031\000\042\000\032\000\041\000\033\000\040\000\
\\034\000\039\000\035\000\038\000\036\000\037\000\037\000\036\000\
\\038\000\035\000\039\000\034\000\040\000\033\000\041\000\032\000\
\\042\000\031\000\043\000\030\000\060\000\024\000\068\000\022\000\
\\069\000\021\000\070\000\020\000\071\000\019\000\072\000\018\000\
\\073\000\017\000\089\000\016\000\000\000\
\\192\002\000\000\
\\193\002\000\000\
\\194\002\009\000\051\001\000\000\
\\195\002\000\000\
\\196\002\000\000\
\\197\002\009\000\048\001\000\000\
\\198\002\000\000\
\\199\002\000\000\
\\200\002\026\000\152\001\027\000\151\001\000\000\
\\201\002\000\000\
\\202\002\000\000\
\\203\002\012\000\177\000\000\000\
\\204\002\000\000\
\\205\002\000\000\
\\206\002\026\000\182\001\000\000\
\\207\002\000\000\
\\208\002\000\000\
\\209\002\009\000\132\001\000\000\
\\210\002\000\000\
\\211\002\000\000\
\\212\002\009\000\213\000\000\000\
\\213\002\000\000\
\\214\002\000\000\
\\215\002\009\000\033\001\000\000\
\\216\002\000\000\
\\217\002\000\000\
\\218\002\009\000\123\001\000\000\
\\219\002\000\000\
\\220\002\000\000\
\\221\002\009\000\120\001\000\000\
\\222\002\000\000\
\\223\002\000\000\
\\224\002\009\000\117\001\000\000\
\\225\002\000\000\
\\226\002\000\000\
\\227\002\009\000\114\001\000\000\
\\228\002\000\000\
\\229\002\000\000\
\\230\002\009\000\111\001\000\000\
\\231\002\000\000\
\\232\002\000\000\
\\233\002\009\000\126\001\000\000\
\"
val actionRowNumbers =
"\055\001\143\000\238\000\193\000\
\\192\000\176\000\202\000\201\000\
\\194\000\175\000\110\000\006\000\
\\145\000\055\001\180\000\184\000\
\\183\000\182\000\181\000\204\000\
\\203\000\040\000\186\000\041\000\
\\042\000\043\000\044\000\045\000\
\\228\000\179\000\178\000\177\000\
\\226\000\209\000\207\000\205\000\
\\211\000\135\000\195\000\174\000\
\\173\000\007\000\009\000\001\000\
\\136\000\026\000\141\000\185\000\
\\155\000\046\000\054\001\027\000\
\\028\000\029\000\030\000\031\000\
\\032\000\210\000\223\000\208\000\
\\221\000\206\000\219\000\227\000\
\\225\000\216\000\214\000\212\000\
\\218\000\199\000\196\000\197\000\
\\237\000\233\000\230\000\172\000\
\\232\000\171\000\069\001\008\000\
\\010\000\098\000\142\000\158\000\
\\011\000\131\000\160\000\159\000\
\\137\000\111\000\058\001\091\000\
\\067\001\049\001\048\001\027\001\
\\047\001\046\001\045\001\044\001\
\\047\000\048\000\049\000\050\001\
\\050\000\043\001\042\001\041\001\
\\026\001\112\000\063\000\064\000\
\\065\000\066\000\067\000\068\000\
\\069\000\224\000\222\000\220\000\
\\217\000\215\000\213\000\200\000\
\\198\000\051\000\090\000\003\000\
\\012\000\113\000\064\001\069\001\
\\052\000\090\000\003\000\013\000\
\\092\000\023\001\021\001\061\001\
\\022\001\053\000\020\001\054\000\
\\025\001\024\001\132\000\161\000\
\\162\000\144\000\056\001\033\000\
\\005\000\065\001\141\000\034\000\
\\035\000\036\000\037\000\156\000\
\\070\000\099\001\071\000\139\000\
\\011\001\114\000\115\000\116\000\
\\117\000\118\000\119\000\014\000\
\\250\000\090\001\101\000\133\000\
\\102\000\120\000\069\001\140\000\
\\191\000\190\000\187\000\015\000\
\\188\000\152\000\062\001\069\001\
\\068\001\014\000\103\000\104\000\
\\121\000\105\000\075\001\004\001\
\\004\000\059\001\142\000\014\000\
\\005\000\016\000\058\001\017\000\
\\067\001\072\000\073\000\074\000\
\\075\000\013\001\097\001\089\000\
\\012\001\093\000\038\001\018\001\
\\035\001\102\001\036\001\055\000\
\\056\000\057\000\058\000\059\000\
\\060\000\037\001\017\001\016\001\
\\061\000\151\000\149\000\150\000\
\\148\000\147\000\146\000\018\000\
\\243\000\242\000\244\000\138\000\
\\245\000\088\001\090\001\248\000\
\\094\000\062\000\234\000\078\001\
\\235\000\084\001\095\000\081\001\
\\015\001\019\000\076\000\064\001\
\\021\000\241\000\229\000\072\001\
\\231\000\073\001\013\000\038\000\
\\069\001\061\001\077\000\078\000\
\\163\000\122\000\167\000\166\000\
\\165\000\170\000\169\000\164\000\
\\168\000\057\001\046\000\066\001\
\\053\001\052\001\051\001\028\001\
\\099\001\004\000\100\001\139\000\
\\022\000\022\000\022\000\022\000\
\\022\000\022\000\022\000\079\000\
\\089\001\002\000\016\000\076\001\
\\123\000\082\001\069\001\004\000\
\\079\001\140\000\039\000\009\001\
\\008\001\005\001\010\001\189\000\
\\063\001\080\000\070\001\124\000\
\\075\001\003\001\125\000\060\001\
\\001\001\019\001\154\000\126\000\
\\098\001\069\001\102\001\081\000\
\\023\000\040\001\082\000\117\001\
\\083\000\114\001\084\000\111\001\
\\085\000\108\001\086\000\105\001\
\\087\000\120\001\024\000\254\000\
\\127\000\255\000\088\000\096\001\
\\078\001\084\001\069\001\081\001\
\\006\001\020\000\025\000\072\001\
\\074\001\153\000\157\000\014\001\
\\101\001\002\001\039\001\033\001\
\\115\001\022\000\032\001\112\001\
\\022\000\031\001\109\001\022\000\
\\030\001\106\001\022\000\029\001\
\\103\001\022\000\034\001\118\001\
\\022\000\134\000\099\000\000\001\
\\096\000\094\001\016\000\077\001\
\\083\001\236\000\080\001\097\000\
\\134\000\100\000\071\001\117\001\
\\114\001\111\001\108\001\105\001\
\\120\001\002\000\249\000\087\001\
\\106\000\128\000\016\000\134\000\
\\002\000\096\001\007\001\107\000\
\\134\000\116\001\113\001\110\001\
\\107\001\104\001\119\001\251\000\
\\085\001\087\001\246\000\002\000\
\\129\000\108\000\253\000\095\001\
\\239\000\109\000\086\001\252\000\
\\093\001\247\000\240\000\091\001\
\\016\000\130\000\093\001\092\001\
\\000\000"
val gotoT =
"\
\\002\000\184\001\003\000\013\000\004\000\012\000\009\000\011\000\
\\012\000\010\000\013\000\009\000\014\000\008\000\015\000\007\000\
\\016\000\006\000\017\000\005\000\019\000\004\000\021\000\003\000\
\\024\000\002\000\045\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\003\000\013\000\004\000\012\000\009\000\011\000\012\000\010\000\
\\013\000\009\000\014\000\008\000\015\000\007\000\016\000\006\000\
\\017\000\005\000\019\000\004\000\021\000\003\000\024\000\002\000\
\\045\000\050\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\008\000\078\000\009\000\077\000\012\000\076\000\013\000\009\000\
\\014\000\008\000\015\000\007\000\016\000\006\000\017\000\005\000\
\\018\000\075\000\019\000\004\000\021\000\003\000\022\000\074\000\
\\024\000\002\000\000\000\
\\005\000\084\000\014\000\083\000\015\000\007\000\016\000\006\000\000\000\
\\047\000\089\000\000\000\
\\040\000\094\000\043\000\093\000\044\000\092\000\053\000\091\000\000\000\
\\000\000\
\\000\000\
\\035\000\109\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\010\000\130\000\051\000\129\000\054\000\128\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\030\000\140\000\039\000\139\000\040\000\138\000\043\000\137\000\
\\049\000\136\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\046\000\150\000\000\000\
\\000\000\
\\052\000\153\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\036\000\161\000\074\000\160\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\026\000\174\000\028\000\173\000\068\000\172\000\000\000\
\\008\000\178\000\009\000\077\000\012\000\076\000\013\000\009\000\
\\014\000\008\000\015\000\007\000\016\000\006\000\017\000\005\000\
\\018\000\075\000\019\000\004\000\020\000\177\000\021\000\003\000\
\\022\000\074\000\024\000\002\000\060\000\176\000\000\000\
\\011\000\182\000\033\000\181\000\037\000\180\000\000\000\
\\000\000\
\\050\000\186\000\000\000\
\\054\000\188\000\000\000\
\\000\000\
\\026\000\190\000\028\000\173\000\068\000\172\000\000\000\
\\008\000\178\000\009\000\077\000\012\000\076\000\013\000\009\000\
\\014\000\008\000\015\000\007\000\016\000\006\000\017\000\005\000\
\\018\000\075\000\019\000\004\000\020\000\192\000\021\000\003\000\
\\022\000\074\000\024\000\002\000\056\000\191\000\000\000\
\\032\000\194\000\058\000\193\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\048\000\197\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\009\000\203\000\013\000\009\000\014\000\008\000\015\000\007\000\
\\016\000\006\000\017\000\005\000\000\000\
\\000\000\
\\040\000\094\000\043\000\093\000\044\000\204\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\073\000\210\000\000\000\
\\000\000\
\\031\000\218\000\038\000\217\000\040\000\216\000\041\000\215\000\
\\043\000\214\000\076\000\213\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\014\000\237\000\015\000\007\000\016\000\006\000\017\000\236\000\
\\023\000\235\000\000\000\
\\000\000\
\\028\000\242\000\067\000\241\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\010\000\249\000\054\000\128\000\064\000\248\000\000\000\
\\031\000\218\000\040\000\216\000\041\000\251\000\043\000\214\000\
\\062\000\250\000\000\000\
\\000\000\
\\000\000\
\\035\000\252\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\010\000\255\000\054\000\128\000\000\000\
\\000\000\
\\014\000\237\000\015\000\007\000\016\000\006\000\017\000\236\000\
\\023\000\000\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\057\000\005\001\000\000\
\\000\000\
\\008\000\008\001\009\000\077\000\012\000\076\000\013\000\009\000\
\\014\000\008\000\015\000\007\000\016\000\006\000\017\000\005\000\
\\018\000\075\000\019\000\004\000\021\000\003\000\022\000\074\000\
\\024\000\002\000\000\000\
\\000\000\
\\030\000\140\000\039\000\009\001\040\000\138\000\043\000\137\000\000\000\
\\014\000\237\000\015\000\007\000\016\000\006\000\017\000\236\000\
\\023\000\010\001\000\000\
\\009\000\011\001\013\000\009\000\014\000\008\000\015\000\007\000\
\\016\000\006\000\017\000\005\000\000\000\
\\006\000\013\001\007\000\012\001\000\000\
\\046\000\021\001\000\000\
\\000\000\
\\052\000\023\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\036\000\028\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\075\000\030\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\028\000\242\000\067\000\040\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\008\000\178\000\009\000\077\000\012\000\076\000\013\000\009\000\
\\014\000\008\000\015\000\007\000\016\000\006\000\017\000\005\000\
\\018\000\075\000\019\000\004\000\020\000\044\001\021\000\003\000\
\\022\000\074\000\024\000\002\000\059\000\043\001\000\000\
\\000\000\
\\063\000\045\001\000\000\
\\000\000\
\\061\000\048\001\000\000\
\\000\000\
\\007\000\051\001\034\000\050\001\000\000\
\\000\000\
\\050\000\056\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\008\000\178\000\009\000\077\000\012\000\076\000\013\000\009\000\
\\014\000\008\000\015\000\007\000\016\000\006\000\017\000\005\000\
\\018\000\075\000\019\000\004\000\020\000\059\001\021\000\003\000\
\\022\000\074\000\024\000\002\000\055\000\058\001\000\000\
\\000\000\
\\000\000\
\\032\000\060\001\000\000\
\\007\000\061\001\000\000\
\\010\000\130\000\051\000\062\001\054\000\128\000\000\000\
\\048\000\063\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\035\000\067\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\073\000\068\001\000\000\
\\008\000\069\001\009\000\077\000\012\000\076\000\013\000\009\000\
\\014\000\008\000\015\000\007\000\016\000\006\000\017\000\005\000\
\\018\000\075\000\019\000\004\000\021\000\003\000\022\000\074\000\
\\024\000\002\000\000\000\
\\000\000\
\\031\000\218\000\038\000\070\001\040\000\216\000\041\000\215\000\
\\043\000\214\000\000\000\
\\042\000\071\001\000\000\
\\042\000\075\001\086\000\074\001\000\000\
\\042\000\077\001\084\000\076\001\000\000\
\\042\000\079\001\082\000\078\001\000\000\
\\042\000\081\001\080\000\080\001\000\000\
\\042\000\083\001\078\000\082\001\000\000\
\\042\000\085\001\088\000\084\001\000\000\
\\000\000\
\\000\000\
\\008\000\178\000\009\000\077\000\012\000\076\000\013\000\009\000\
\\014\000\008\000\015\000\007\000\016\000\006\000\017\000\005\000\
\\018\000\075\000\019\000\004\000\020\000\088\001\021\000\003\000\
\\022\000\074\000\024\000\002\000\029\000\087\001\000\000\
\\006\000\091\001\007\000\012\001\072\000\090\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\010\000\093\001\054\000\128\000\000\000\
\\008\000\094\001\009\000\077\000\012\000\076\000\013\000\009\000\
\\014\000\008\000\015\000\007\000\016\000\006\000\017\000\005\000\
\\018\000\075\000\019\000\004\000\021\000\003\000\022\000\074\000\
\\024\000\002\000\000\000\
\\000\000\
\\031\000\218\000\040\000\216\000\041\000\095\001\043\000\214\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\057\000\100\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\010\000\103\001\054\000\128\000\000\000\
\\075\000\104\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\085\000\108\001\000\000\
\\000\000\
\\083\000\111\001\000\000\
\\000\000\
\\081\000\114\001\000\000\
\\000\000\
\\079\000\117\001\000\000\
\\000\000\
\\077\000\120\001\000\000\
\\000\000\
\\087\000\123\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\071\000\129\001\000\000\
\\008\000\178\000\009\000\077\000\012\000\076\000\013\000\009\000\
\\014\000\008\000\015\000\007\000\016\000\006\000\017\000\005\000\
\\018\000\075\000\019\000\004\000\020\000\044\001\021\000\003\000\
\\022\000\074\000\024\000\002\000\059\000\131\001\000\000\
\\063\000\132\001\000\000\
\\010\000\249\000\054\000\128\000\064\000\133\001\000\000\
\\061\000\134\001\000\000\
\\000\000\
\\007\000\051\001\034\000\135\001\000\000\
\\000\000\
\\008\000\178\000\009\000\077\000\012\000\076\000\013\000\009\000\
\\014\000\008\000\015\000\007\000\016\000\006\000\017\000\005\000\
\\018\000\075\000\019\000\004\000\020\000\059\001\021\000\003\000\
\\022\000\074\000\024\000\002\000\055\000\138\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\042\000\139\001\000\000\
\\000\000\
\\000\000\
\\042\000\140\001\000\000\
\\000\000\
\\000\000\
\\042\000\141\001\000\000\
\\000\000\
\\000\000\
\\042\000\142\001\000\000\
\\000\000\
\\000\000\
\\042\000\143\001\000\000\
\\000\000\
\\000\000\
\\042\000\144\001\000\000\
\\025\000\148\001\027\000\147\001\066\000\146\001\070\000\145\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\006\000\153\001\007\000\012\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\025\000\155\001\027\000\147\001\066\000\146\001\070\000\145\001\000\000\
\\000\000\
\\000\000\
\\085\000\157\001\000\000\
\\083\000\158\001\000\000\
\\081\000\159\001\000\000\
\\079\000\160\001\000\000\
\\077\000\161\001\000\000\
\\087\000\162\001\000\000\
\\008\000\178\000\009\000\077\000\012\000\076\000\013\000\009\000\
\\014\000\008\000\015\000\007\000\016\000\006\000\017\000\005\000\
\\018\000\075\000\019\000\004\000\020\000\088\001\021\000\003\000\
\\022\000\074\000\024\000\002\000\029\000\163\001\000\000\
\\000\000\
\\027\000\165\001\065\000\164\001\070\000\145\001\000\000\
\\000\000\
\\000\000\
\\006\000\168\001\007\000\012\001\000\000\
\\025\000\169\001\027\000\147\001\066\000\146\001\070\000\145\001\000\000\
\\008\000\178\000\009\000\077\000\012\000\076\000\013\000\009\000\
\\014\000\008\000\015\000\007\000\016\000\006\000\017\000\005\000\
\\018\000\075\000\019\000\004\000\020\000\088\001\021\000\003\000\
\\022\000\074\000\024\000\002\000\029\000\170\001\000\000\
\\071\000\171\001\000\000\
\\000\000\
\\000\000\
\\025\000\173\001\027\000\147\001\066\000\146\001\070\000\145\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\027\000\165\001\065\000\174\001\070\000\145\001\000\000\
\\000\000\
\\008\000\178\000\009\000\077\000\012\000\076\000\013\000\009\000\
\\014\000\008\000\015\000\007\000\016\000\006\000\017\000\005\000\
\\018\000\075\000\019\000\004\000\020\000\088\001\021\000\003\000\
\\022\000\074\000\024\000\002\000\029\000\175\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\069\000\179\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\006\000\181\001\007\000\012\001\000\000\
\\000\000\
\\069\000\183\001\000\000\
\\000\000\
\\000\000\
\"
val numstates = 441
val numrules = 303
val s = ref "" and index = ref 0
val string_to_int = fn () => 
let val i = !index
in index := i+2; Char.ord(String.sub(!s,i)) + Char.ord(String.sub(!s,i+1)) * 256
end
val string_to_list = fn s' =>
    let val len = String.size s'
        fun f () =
           if !index < len then string_to_int() :: f()
           else nil
   in index := 0; s := s'; f ()
   end
val string_to_pairlist = fn (conv_key,conv_entry) =>
     let fun f () =
         case string_to_int()
         of 0 => EMPTY
          | n => PAIR(conv_key (n-1),conv_entry (string_to_int()),f())
     in f
     end
val string_to_pairlist_default = fn (conv_key,conv_entry) =>
    let val conv_row = string_to_pairlist(conv_key,conv_entry)
    in fn () =>
       let val default = conv_entry(string_to_int())
           val row = conv_row()
       in (row,default)
       end
   end
val string_to_table = fn (convert_row,s') =>
    let val len = String.size s'
        fun f ()=
           if !index < len then convert_row() :: f()
           else nil
     in (s := s'; index := 0; f ())
     end
local
  val memo = Array.array(numstates+numrules,ERROR)
  val _ =let fun g i=(Array.update(memo,i,REDUCE(i-numstates)); g(i+1))
       fun f i =
            if i=numstates then g i
            else (Array.update(memo,i,SHIFT (STATE i)); f (i+1))
          in f 0 handle Subscript => ()
          end
in
val entry_to_action = fn 0 => ACCEPT | 1 => ERROR | j => Array.sub(memo,(j-2))
end
val gotoT=Array.fromList(string_to_table(string_to_pairlist(NT,STATE),gotoT))
val actionRows=string_to_table(string_to_pairlist_default(T,entry_to_action),actionRows)
val actionRowNumbers = string_to_list actionRowNumbers
val actionT = let val actionRowLookUp=
let val a=Array.fromList(actionRows) in fn i=>Array.sub(a,i) end
in Array.fromList(map actionRowLookUp actionRowNumbers)
end
in LrTable.mkLrTable {actions=actionT,gotos=gotoT,numRules=numrules,
numStates=numstates,initialState=STATE 0}
end
end
local open Header in
type pos = int
type arg = unit
structure MlyValue = 
struct
datatype svalue = VOID | ntVOID of unit | ASTERISK of  (string)
 | UUID of  (string) | WORD32 of  (Word32.word)
 | INT32 of  (Int32.int) | STRING of  (string) | ID of  (Atom.atom)
 | Plus_List_23 of  ( ( P.attr_var )  list)
 | List_23 of  ( ( P.attr_var )  list)
 | Plus_List_22 of  ( ( P.attr_var )  list)
 | List_22 of  ( ( P.attr_var )  list)
 | Plus_List_21 of  ( ( P.attr_var )  list)
 | List_21 of  ( ( P.attr_var )  list)
 | Plus_List_20 of  ( ( P.attr_var )  list)
 | List_20 of  ( ( P.attr_var )  list)
 | Plus_List_19 of  ( ( P.attr_var )  list)
 | List_19 of  ( ( P.attr_var )  list)
 | Plus_List_18 of  ( ( P.attr_var )  list)
 | List_18 of  ( ( P.attr_var )  list)
 | Plus_List_17 of  ( ( P.param_attribute )  list)
 | List_17 of  ( ( P.param_attribute )  list)
 | Plus_List_16 of  ( ( P.param_declarator )  list)
 | List_16 of  ( ( P.param_declarator )  list)
 | Plus_List_15 of  ( ( P.const_exp )  list)
 | List_15 of  ( ( P.const_exp )  list)
 | Plus_List_14 of  ( ( P.const_exp )  list)
 | List_14 of  ( ( P.const_exp )  list)
 | Plus_List_13 of  ( ( P.union_case_ne )  list)
 | List_13 of  ( ( P.union_case_ne )  list)
 | Plus_List_12 of  ( ( P.union_case )  list)
 | List_12 of  ( ( P.union_case )  list)
 | Plus_List_11 of  ( ( P.declarator )  list)
 | List_11 of  ( ( P.declarator )  list)
 | Plus_List_10 of  ( ( P.field_attribute )  list)
 | List_10 of  ( ( P.field_attribute )  list)
 | Plus_List_9 of  ( ( P.member )  list)
 | List_9 of  ( ( P.member )  list)
 | Plus_List_8 of  ( ( P.identifier )  list)
 | List_8 of  ( ( P.identifier )  list)
 | Plus_List_7 of  ( ( P.member )  list)
 | List_7 of  ( ( P.member )  list) | List_6 of  ( ( string )  list)
 | Plus_List_5 of  ( ( P.operation_attribute )  list)
 | List_5 of  ( ( P.operation_attribute )  list)
 | Plus_List_4 of  ( ( P.declarator )  list)
 | List_4 of  ( ( P.declarator )  list)
 | Plus_List_3 of  ( ( P.type_attribute )  list)
 | List_3 of  ( ( P.type_attribute )  list)
 | Plus_List_2 of  ( ( string )  list)
 | List_2 of  ( ( string )  list)
 | List_1 of  ( ( P.top_level )  list)
 | operation_attribute of  (P.operation_attribute)
 | ptr_attribute of  (P.ptr_attribute) | attr_var of  (P.attr_var)
 | field_attribute of  (P.field_attribute)
 | usage_attribute of  (P.usage_attribute)
 | type_attribute of  (P.type_attribute)
 | param_attribute of  (P.param_attribute)
 | function_declarator of  (P.function_declarator)
 | param_declarator of  (P.param_declarator)
 | param_declarators of  (P.param_declarators)
 | array_bound of  (P.array_bound)
 | array_declarator of  (P.array_declarator)
 | identifier of  (P.identifier)
 | union_instance_switch_attr of  (P.union_instance_switch_attr)
 | union_type_switch_attr of  (P.union_type_switch_attr)
 | union_arm of  (P.union_arm) | union_case_ne of  (P.union_case_ne)
 | union_case of  (P.union_case) | union_body_ne of  (P.union_body_ne)
 | union_body of  (P.union_body) | tagged_union of  (P.tagged_union)
 | switch_type_spec of  (P.switch_type_spec)
 | union_type of  (P.union_type)
 | tagged_union_declarator of  (P.tagged_union_declarator)
 | member of  (P.member)
 | tagged_struct_declarator of  (P.tagged_struct_declarator)
 | constructed_type_spec of  (P.constructed_type_spec)
 | char_type of  (P.char_type)
 | unsigned_integer of  (P.unsigned_integer)
 | signed_integer of  (P.signed_integer)
 | primitive_integer_type of  (P.primitive_integer_type)
 | integer_type of  (P.integer_type)
 | tagged_declarator of  (P.tagged_declarator)
 | direct_declarator of  (P.direct_declarator)
 | declarator of  (P.declarator)
 | simple_type_spec of  (P.simple_type_spec)
 | type_spec of  (P.type_spec)
 | integer_const_exp of  (P.integer_const_exp)
 | const_exp of  (P.const_exp)
 | const_type_spec of  (P.const_type_spec)
 | declaration of  (P.declaration) | top_level of  (P.top_level)
 | start of  (P.start) | IDX of  (Atom.atom)
end
type svalue = MlyValue.svalue
type result = P.start
end
structure EC=
struct
open LrTable
val is_keyword =
fn _ => false
val preferred_change = 
nil
val noShift = 
fn _ => false
val showTerminal =
fn (T 0) => "EOF"
  | (T 1) => "ID"
  | (T 2) => "STRING"
  | (T 3) => "INT32"
  | (T 4) => "WORD32"
  | (T 5) => "UUID"
  | (T 6) => "DDOT"
  | (T 7) => "DOT"
  | (T 8) => "COMMA"
  | (T 9) => "LPAREN"
  | (T 10) => "RPAREN"
  | (T 11) => "LBRACK"
  | (T 12) => "RBRACK"
  | (T 13) => "LBRACE"
  | (T 14) => "RBRACE"
  | (T 15) => "SEMI"
  | (T 16) => "COLON"
  | (T 17) => "ASTERISK"
  | (T 18) => "QUOTE"
  | (T 19) => "EQSIGN"
  | (T 20) => "DASH"
  | (T 21) => "KW_import"
  | (T 22) => "KW_const"
  | (T 23) => "KW_typedef"
  | (T 24) => "KW_switch"
  | (T 25) => "KW_case"
  | (T 26) => "KW_default"
  | (T 27) => "KW_enum"
  | (T 28) => "KW_struct"
  | (T 29) => "KW_union"
  | (T 30) => "KW_float"
  | (T 31) => "KW_double"
  | (T 32) => "KW_hyper"
  | (T 33) => "KW_unsigned"
  | (T 34) => "KW_int"
  | (T 35) => "KW_long"
  | (T 36) => "KW_short"
  | (T 37) => "KW_small"
  | (T 38) => "KW_char"
  | (T 39) => "KW_boolean"
  | (T 40) => "KW_byte"
  | (T 41) => "KW_void"
  | (T 42) => "KW_wchar_t"
  | (T 43) => "KW_TRUE"
  | (T 44) => "KW_FALSE"
  | (T 45) => "KW_NULL"
  | (T 46) => "KW_string"
  | (T 47) => "KW_size_is"
  | (T 48) => "KW_ref"
  | (T 49) => "KW_unique"
  | (T 50) => "KW_ptr"
  | (T 51) => "KW_in"
  | (T 52) => "KW_out"
  | (T 53) => "KW_sml_structure"
  | (T 54) => "KW_sml_signature"
  | (T 55) => "KW_clib_name"
  | (T 56) => "KW_clib_date"
  | (T 57) => "KW_clib_version"
  | (T 58) => "KW_sml_type"
  | (T 59) => "KW_sml_value"
  | (T 60) => "KW_sml_context"
  | (T 61) => "KW_exclude"
  | (T 62) => "KW_abstract"
  | (T 63) => "KW_cpp_quote"
  | (T 64) => "KW_pre"
  | (T 65) => "KW_post"
  | (T 66) => "KW_call"
  | (T 67) => "KW_sml_int"
  | (T 68) => "KW_sml_word"
  | (T 69) => "KW_error_status_t"
  | (T 70) => "KW_ISO_LATIN1"
  | (T 71) => "KW_ISO_MULTILINGUAL"
  | (T 72) => "KW_ISO_UCS"
  | (T 73) => "KW_idempotent"
  | (T 74) => "KW_broadcast"
  | (T 75) => "KW_maybe"
  | (T 76) => "KW_reflect_deletions"
  | (T 77) => "KW_ignore"
  | (T 78) => "KW_context_handle"
  | (T 79) => "KW_first_is"
  | (T 80) => "KW_last_is"
  | (T 81) => "KW_length_is"
  | (T 82) => "KW_min_is"
  | (T 83) => "KW_max_is"
  | (T 84) => "KW_transmit_as"
  | (T 85) => "KW_handle"
  | (T 86) => "KW_switch_type"
  | (T 87) => "KW_switch_is"
  | (T 88) => "KW_handle_t"
  | _ => "bogus-term"
local open Header in
val errtermvalue=
fn _ => MlyValue.VOID
end
val terms = (T 0) :: (T 6) :: (T 7) :: (T 8) :: (T 9) :: (T 10) :: (T 
11) :: (T 12) :: (T 13) :: (T 14) :: (T 15) :: (T 16) :: (T 18) :: (T 
19) :: (T 20) :: (T 21) :: (T 22) :: (T 23) :: (T 24) :: (T 25) :: (T 
26) :: (T 27) :: (T 28) :: (T 29) :: (T 30) :: (T 31) :: (T 32) :: (T 
33) :: (T 34) :: (T 35) :: (T 36) :: (T 37) :: (T 38) :: (T 39) :: (T 
40) :: (T 41) :: (T 42) :: (T 43) :: (T 44) :: (T 45) :: (T 46) :: (T 
47) :: (T 48) :: (T 49) :: (T 50) :: (T 51) :: (T 52) :: (T 53) :: (T 
54) :: (T 55) :: (T 56) :: (T 57) :: (T 58) :: (T 59) :: (T 60) :: (T 
61) :: (T 62) :: (T 63) :: (T 64) :: (T 65) :: (T 66) :: (T 67) :: (T 
68) :: (T 69) :: (T 70) :: (T 71) :: (T 72) :: (T 73) :: (T 74) :: (T 
75) :: (T 76) :: (T 77) :: (T 78) :: (T 79) :: (T 80) :: (T 81) :: (T 
82) :: (T 83) :: (T 84) :: (T 85) :: (T 86) :: (T 87) :: (T 88) :: nil
end
structure Actions =
struct 
exception mlyAction of int
local open Header in
val actions = 
fn (i392,defaultPos,stack,
    (()):arg) =>
case (i392,stack)
of (0,(_,(MlyValue.ID ID,ID1left,ID1right))::rest671) => let val 
result=MlyValue.IDX((ID))
 in (LrTable.NT 0,(result,ID1left,ID1right),rest671) end
| (1,(_,(_,KW_import1left,KW_import1right))::rest671) => let val 
result=MlyValue.IDX((Atom.atom "import"))
 in (LrTable.NT 0,(result,KW_import1left,KW_import1right),rest671) end
| (2,(_,(_,KW_const1left,KW_const1right))::rest671) => let val result=
MlyValue.IDX((Atom.atom "const"))
 in (LrTable.NT 0,(result,KW_const1left,KW_const1right),rest671) end
| (3,(_,(_,KW_typedef1left,KW_typedef1right))::rest671) => let val 
result=MlyValue.IDX((Atom.atom "typedef"))
 in (LrTable.NT 0,(result,KW_typedef1left,KW_typedef1right),rest671)
 end
| (4,(_,(_,KW_switch1left,KW_switch1right))::rest671) => let val 
result=MlyValue.IDX((Atom.atom "switch"))
 in (LrTable.NT 0,(result,KW_switch1left,KW_switch1right),rest671) end
| (5,(_,(_,KW_case1left,KW_case1right))::rest671) => let val result=
MlyValue.IDX((Atom.atom "case"))
 in (LrTable.NT 0,(result,KW_case1left,KW_case1right),rest671) end
| (6,(_,(_,KW_default1left,KW_default1right))::rest671) => let val 
result=MlyValue.IDX((Atom.atom "default"))
 in (LrTable.NT 0,(result,KW_default1left,KW_default1right),rest671)
 end
| (7,(_,(_,KW_enum1left,KW_enum1right))::rest671) => let val result=
MlyValue.IDX((Atom.atom "enum"))
 in (LrTable.NT 0,(result,KW_enum1left,KW_enum1right),rest671) end
| (8,(_,(_,KW_struct1left,KW_struct1right))::rest671) => let val 
result=MlyValue.IDX((Atom.atom "struct"))
 in (LrTable.NT 0,(result,KW_struct1left,KW_struct1right),rest671) end
| (9,(_,(_,KW_union1left,KW_union1right))::rest671) => let val result=
MlyValue.IDX((Atom.atom "union"))
 in (LrTable.NT 0,(result,KW_union1left,KW_union1right),rest671) end
| (10,(_,(_,KW_float1left,KW_float1right))::rest671) => let val result
=MlyValue.IDX((Atom.atom "float"))
 in (LrTable.NT 0,(result,KW_float1left,KW_float1right),rest671) end
| (11,(_,(_,KW_double1left,KW_double1right))::rest671) => let val 
result=MlyValue.IDX((Atom.atom "double"))
 in (LrTable.NT 0,(result,KW_double1left,KW_double1right),rest671) end
| (12,(_,(_,KW_hyper1left,KW_hyper1right))::rest671) => let val result
=MlyValue.IDX((Atom.atom "hyper"))
 in (LrTable.NT 0,(result,KW_hyper1left,KW_hyper1right),rest671) end
| (13,(_,(_,KW_unsigned1left,KW_unsigned1right))::rest671) => let val 
result=MlyValue.IDX((Atom.atom "unsigned"))
 in (LrTable.NT 0,(result,KW_unsigned1left,KW_unsigned1right),rest671)
 end
| (14,(_,(_,KW_int1left,KW_int1right))::rest671) => let val result=
MlyValue.IDX((Atom.atom "int"))
 in (LrTable.NT 0,(result,KW_int1left,KW_int1right),rest671) end
| (15,(_,(_,KW_long1left,KW_long1right))::rest671) => let val result=
MlyValue.IDX((Atom.atom "long"))
 in (LrTable.NT 0,(result,KW_long1left,KW_long1right),rest671) end
| (16,(_,(_,KW_short1left,KW_short1right))::rest671) => let val result
=MlyValue.IDX((Atom.atom "short"))
 in (LrTable.NT 0,(result,KW_short1left,KW_short1right),rest671) end
| (17,(_,(_,KW_small1left,KW_small1right))::rest671) => let val result
=MlyValue.IDX((Atom.atom "small"))
 in (LrTable.NT 0,(result,KW_small1left,KW_small1right),rest671) end
| (18,(_,(_,KW_char1left,KW_char1right))::rest671) => let val result=
MlyValue.IDX((Atom.atom "char"))
 in (LrTable.NT 0,(result,KW_char1left,KW_char1right),rest671) end
| (19,(_,(_,KW_boolean1left,KW_boolean1right))::rest671) => let val 
result=MlyValue.IDX((Atom.atom "boolean"))
 in (LrTable.NT 0,(result,KW_boolean1left,KW_boolean1right),rest671)
 end
| (20,(_,(_,KW_byte1left,KW_byte1right))::rest671) => let val result=
MlyValue.IDX((Atom.atom "byte"))
 in (LrTable.NT 0,(result,KW_byte1left,KW_byte1right),rest671) end
| (21,(_,(_,KW_void1left,KW_void1right))::rest671) => let val result=
MlyValue.IDX((Atom.atom "void"))
 in (LrTable.NT 0,(result,KW_void1left,KW_void1right),rest671) end
| (22,(_,(_,KW_wchar_t1left,KW_wchar_t1right))::rest671) => let val 
result=MlyValue.IDX((Atom.atom "wchar_t"))
 in (LrTable.NT 0,(result,KW_wchar_t1left,KW_wchar_t1right),rest671)
 end
| (23,(_,(_,KW_TRUE1left,KW_TRUE1right))::rest671) => let val result=
MlyValue.IDX((Atom.atom "TRUE"))
 in (LrTable.NT 0,(result,KW_TRUE1left,KW_TRUE1right),rest671) end
| (24,(_,(_,KW_FALSE1left,KW_FALSE1right))::rest671) => let val result
=MlyValue.IDX((Atom.atom "FALSE"))
 in (LrTable.NT 0,(result,KW_FALSE1left,KW_FALSE1right),rest671) end
| (25,(_,(_,KW_NULL1left,KW_NULL1right))::rest671) => let val result=
MlyValue.IDX((Atom.atom "NULL"))
 in (LrTable.NT 0,(result,KW_NULL1left,KW_NULL1right),rest671) end
| (26,(_,(_,KW_string1left,KW_string1right))::rest671) => let val 
result=MlyValue.IDX((Atom.atom "string"))
 in (LrTable.NT 0,(result,KW_string1left,KW_string1right),rest671) end
| (27,(_,(_,KW_size_is1left,KW_size_is1right))::rest671) => let val 
result=MlyValue.IDX((Atom.atom "size_is"))
 in (LrTable.NT 0,(result,KW_size_is1left,KW_size_is1right),rest671)
 end
| (28,(_,(_,KW_ref1left,KW_ref1right))::rest671) => let val result=
MlyValue.IDX((Atom.atom "ref"))
 in (LrTable.NT 0,(result,KW_ref1left,KW_ref1right),rest671) end
| (29,(_,(_,KW_unique1left,KW_unique1right))::rest671) => let val 
result=MlyValue.IDX((Atom.atom "unique"))
 in (LrTable.NT 0,(result,KW_unique1left,KW_unique1right),rest671) end
| (30,(_,(_,KW_ptr1left,KW_ptr1right))::rest671) => let val result=
MlyValue.IDX((Atom.atom "ptr"))
 in (LrTable.NT 0,(result,KW_ptr1left,KW_ptr1right),rest671) end
| (31,(_,(_,KW_in1left,KW_in1right))::rest671) => let val result=
MlyValue.IDX((Atom.atom "in"))
 in (LrTable.NT 0,(result,KW_in1left,KW_in1right),rest671) end
| (32,(_,(_,KW_out1left,KW_out1right))::rest671) => let val result=
MlyValue.IDX((Atom.atom "out"))
 in (LrTable.NT 0,(result,KW_out1left,KW_out1right),rest671) end
| (33,(_,(_,KW_sml_structure1left,KW_sml_structure1right))::rest671)
 => let val result=MlyValue.IDX((Atom.atom "sml_structure"))
 in (LrTable.NT 0,(result,KW_sml_structure1left,KW_sml_structure1right
),rest671) end
| (34,(_,(_,KW_sml_signature1left,KW_sml_signature1right))::rest671)
 => let val result=MlyValue.IDX((Atom.atom "sml_signature"))
 in (LrTable.NT 0,(result,KW_sml_signature1left,KW_sml_signature1right
),rest671) end
| (35,(_,(_,KW_clib_name1left,KW_clib_name1right))::rest671) => let 
val result=MlyValue.IDX((Atom.atom "clib_name"))
 in (LrTable.NT 0,(result,KW_clib_name1left,KW_clib_name1right),
rest671) end
| (36,(_,(_,KW_clib_date1left,KW_clib_date1right))::rest671) => let 
val result=MlyValue.IDX((Atom.atom "clib_date"))
 in (LrTable.NT 0,(result,KW_clib_date1left,KW_clib_date1right),
rest671) end
| (37,(_,(_,KW_clib_version1left,KW_clib_version1right))::rest671) => 
let val result=MlyValue.IDX((Atom.atom "clib_version"))
 in (LrTable.NT 0,(result,KW_clib_version1left,KW_clib_version1right),
rest671) end
| (38,(_,(_,KW_sml_type1left,KW_sml_type1right))::rest671) => let val 
result=MlyValue.IDX((Atom.atom "sml_type"))
 in (LrTable.NT 0,(result,KW_sml_type1left,KW_sml_type1right),rest671)
 end
| (39,(_,(_,KW_sml_value1left,KW_sml_value1right))::rest671) => let 
val result=MlyValue.IDX((Atom.atom "sml_value"))
 in (LrTable.NT 0,(result,KW_sml_value1left,KW_sml_value1right),
rest671) end
| (40,(_,(_,KW_sml_context1left,KW_sml_context1right))::rest671) => 
let val result=MlyValue.IDX((Atom.atom "sml_context"))
 in (LrTable.NT 0,(result,KW_sml_context1left,KW_sml_context1right),
rest671) end
| (41,(_,(_,KW_exclude1left,KW_exclude1right))::rest671) => let val 
result=MlyValue.IDX((Atom.atom "exclude"))
 in (LrTable.NT 0,(result,KW_exclude1left,KW_exclude1right),rest671)
 end
| (42,(_,(_,KW_abstract1left,KW_abstract1right))::rest671) => let val 
result=MlyValue.IDX((Atom.atom "abstract"))
 in (LrTable.NT 0,(result,KW_abstract1left,KW_abstract1right),rest671)
 end
| (43,(_,(_,KW_cpp_quote1left,KW_cpp_quote1right))::rest671) => let 
val result=MlyValue.IDX((Atom.atom "cpp_quote"))
 in (LrTable.NT 0,(result,KW_cpp_quote1left,KW_cpp_quote1right),
rest671) end
| (44,(_,(_,KW_pre1left,KW_pre1right))::rest671) => let val result=
MlyValue.IDX((Atom.atom "pre"))
 in (LrTable.NT 0,(result,KW_pre1left,KW_pre1right),rest671) end
| (45,(_,(_,KW_post1left,KW_post1right))::rest671) => let val result=
MlyValue.IDX((Atom.atom "post"))
 in (LrTable.NT 0,(result,KW_post1left,KW_post1right),rest671) end
| (46,(_,(_,KW_call1left,KW_call1right))::rest671) => let val result=
MlyValue.IDX((Atom.atom "call"))
 in (LrTable.NT 0,(result,KW_call1left,KW_call1right),rest671) end
| (47,(_,(_,KW_sml_int1left,KW_sml_int1right))::rest671) => let val 
result=MlyValue.IDX((Atom.atom "sml_int"))
 in (LrTable.NT 0,(result,KW_sml_int1left,KW_sml_int1right),rest671)
 end
| (48,(_,(_,KW_sml_word1left,KW_sml_word1right))::rest671) => let val 
result=MlyValue.IDX((Atom.atom "sml_word"))
 in (LrTable.NT 0,(result,KW_sml_word1left,KW_sml_word1right),rest671)
 end
| (49,(_,(_,KW_error_status_t1left,KW_error_status_t1right))::rest671)
 => let val result=MlyValue.IDX((Atom.atom "error_status_t"))
 in (LrTable.NT 0,(result,KW_error_status_t1left,
KW_error_status_t1right),rest671) end
| (50,(_,(_,KW_ISO_LATIN11left,KW_ISO_LATIN11right))::rest671) => let 
val result=MlyValue.IDX((Atom.atom "ISO_LATIN1"))
 in (LrTable.NT 0,(result,KW_ISO_LATIN11left,KW_ISO_LATIN11right),
rest671) end
| (51,(_,(_,KW_ISO_MULTILINGUAL1left,KW_ISO_MULTILINGUAL1right))::
rest671) => let val result=MlyValue.IDX((Atom.atom "ISO_MULTILINGUAL")
)
 in (LrTable.NT 0,(result,KW_ISO_MULTILINGUAL1left,
KW_ISO_MULTILINGUAL1right),rest671) end
| (52,(_,(_,KW_ISO_UCS1left,KW_ISO_UCS1right))::rest671) => let val 
result=MlyValue.IDX((Atom.atom "ISO_UCS"))
 in (LrTable.NT 0,(result,KW_ISO_UCS1left,KW_ISO_UCS1right),rest671)
 end
| (53,(_,(_,KW_idempotent1left,KW_idempotent1right))::rest671) => let 
val result=MlyValue.IDX((Atom.atom "idempotent"))
 in (LrTable.NT 0,(result,KW_idempotent1left,KW_idempotent1right),
rest671) end
| (54,(_,(_,KW_broadcast1left,KW_broadcast1right))::rest671) => let 
val result=MlyValue.IDX((Atom.atom "broadcast"))
 in (LrTable.NT 0,(result,KW_broadcast1left,KW_broadcast1right),
rest671) end
| (55,(_,(_,KW_maybe1left,KW_maybe1right))::rest671) => let val result
=MlyValue.IDX((Atom.atom "maybe"))
 in (LrTable.NT 0,(result,KW_maybe1left,KW_maybe1right),rest671) end
| (56,(_,(_,KW_reflect_deletions1left,KW_reflect_deletions1right))::
rest671) => let val result=MlyValue.IDX((Atom.atom "reflect_deletions"
))
 in (LrTable.NT 0,(result,KW_reflect_deletions1left,
KW_reflect_deletions1right),rest671) end
| (57,(_,(_,KW_ignore1left,KW_ignore1right))::rest671) => let val 
result=MlyValue.IDX((Atom.atom "ignore"))
 in (LrTable.NT 0,(result,KW_ignore1left,KW_ignore1right),rest671) end
| (58,(_,(_,KW_context_handle1left,KW_context_handle1right))::rest671)
 => let val result=MlyValue.IDX((Atom.atom "context_handle"))
 in (LrTable.NT 0,(result,KW_context_handle1left,
KW_context_handle1right),rest671) end
| (59,(_,(_,KW_first_is1left,KW_first_is1right))::rest671) => let val 
result=MlyValue.IDX((Atom.atom "first_is"))
 in (LrTable.NT 0,(result,KW_first_is1left,KW_first_is1right),rest671)
 end
| (60,(_,(_,KW_last_is1left,KW_last_is1right))::rest671) => let val 
result=MlyValue.IDX((Atom.atom "last_is"))
 in (LrTable.NT 0,(result,KW_last_is1left,KW_last_is1right),rest671)
 end
| (61,(_,(_,KW_length_is1left,KW_length_is1right))::rest671) => let 
val result=MlyValue.IDX((Atom.atom "length_is"))
 in (LrTable.NT 0,(result,KW_length_is1left,KW_length_is1right),
rest671) end
| (62,(_,(_,KW_min_is1left,KW_min_is1right))::rest671) => let val 
result=MlyValue.IDX((Atom.atom "min_is"))
 in (LrTable.NT 0,(result,KW_min_is1left,KW_min_is1right),rest671) end
| (63,(_,(_,KW_max_is1left,KW_max_is1right))::rest671) => let val 
result=MlyValue.IDX((Atom.atom "max_is"))
 in (LrTable.NT 0,(result,KW_max_is1left,KW_max_is1right),rest671) end
| (64,(_,(_,KW_transmit_as1left,KW_transmit_as1right))::rest671) => 
let val result=MlyValue.IDX((Atom.atom "transmit_as"))
 in (LrTable.NT 0,(result,KW_transmit_as1left,KW_transmit_as1right),
rest671) end
| (65,(_,(_,KW_handle1left,KW_handle1right))::rest671) => let val 
result=MlyValue.IDX((Atom.atom "handle"))
 in (LrTable.NT 0,(result,KW_handle1left,KW_handle1right),rest671) end
| (66,(_,(_,KW_switch_type1left,KW_switch_type1right))::rest671) => 
let val result=MlyValue.IDX((Atom.atom "switch_type"))
 in (LrTable.NT 0,(result,KW_switch_type1left,KW_switch_type1right),
rest671) end
| (67,(_,(_,KW_switch_is1left,KW_switch_is1right))::rest671) => let 
val result=MlyValue.IDX((Atom.atom "switch_is"))
 in (LrTable.NT 0,(result,KW_switch_is1left,KW_switch_is1right),
rest671) end
| (68,(_,(_,KW_handle_t1left,KW_handle_t1right))::rest671) => let val 
result=MlyValue.IDX((Atom.atom "handle_t"))
 in (LrTable.NT 0,(result,KW_handle_t1left,KW_handle_t1right),rest671)
 end
| (69,(_,(MlyValue.List_1 List_1,List_11left,List_11right))::rest671)
 => let val result=MlyValue.start((P.PT (List_1)))
 in (LrTable.NT 1,(result,List_11left,List_11right),rest671) end
| (70,(_,(_,_,SEMI1right))::(_,(MlyValue.Plus_List_2 Plus_List_2,_,_))
::(_,(_,KW_import1left,_))::rest671) => let val result=
MlyValue.top_level((P.Import (Plus_List_2)))
 in (LrTable.NT 2,(result,KW_import1left,SEMI1right),rest671) end
| (71,(_,(MlyValue.declaration declaration,declaration1left,
declaration1right))::rest671) => let val result=MlyValue.top_level((
P.TopDecl (declaration)))
 in (LrTable.NT 2,(result,declaration1left,declaration1right),rest671)
 end
| (72,(_,(_,_,SEMI1right))::_::(_,(MlyValue.STRING STRING,_,_))::_::(_
,(_,KW_sml_structure1left,_))::rest671) => let val result=
MlyValue.top_level((P.StructName (STRING)))
 in (LrTable.NT 2,(result,KW_sml_structure1left,SEMI1right),rest671)
 end
| (73,(_,(_,_,SEMI1right))::_::(_,(MlyValue.STRING STRING,_,_))::_::(_
,(_,KW_sml_signature1left,_))::rest671) => let val result=
MlyValue.top_level((P.SigName (STRING)))
 in (LrTable.NT 2,(result,KW_sml_signature1left,SEMI1right),rest671)
 end
| (74,(_,(_,_,SEMI1right))::_::(_,(MlyValue.STRING STRING,_,_))::_::(_
,(_,KW_clib_name1left,_))::rest671) => let val result=
MlyValue.top_level((P.CLibName (STRING)))
 in (LrTable.NT 2,(result,KW_clib_name1left,SEMI1right),rest671) end
| (75,(_,(_,_,SEMI1right))::_::(_,(MlyValue.STRING STRING,_,_))::_::(_
,(_,KW_clib_version1left,_))::rest671) => let val result=
MlyValue.top_level((P.CLibVersion (STRING)))
 in (LrTable.NT 2,(result,KW_clib_version1left,SEMI1right),rest671)
 end
| (76,(_,(_,_,SEMI1right))::_::(_,(MlyValue.STRING STRING,_,_))::_::(_
,(_,KW_clib_date1left,_))::rest671) => let val result=
MlyValue.top_level((P.CLibDate (STRING)))
 in (LrTable.NT 2,(result,KW_clib_date1left,SEMI1right),rest671) end
| (77,(_,(_,_,SEMI1right))::_::(_,(MlyValue.STRING STRING,_,_))::_::(_
,(_,KW_cpp_quote1left,_))::rest671) => let val result=
MlyValue.top_level((P.CppQuote (STRING)))
 in (LrTable.NT 2,(result,KW_cpp_quote1left,SEMI1right),rest671) end
| (78,(_,(_,_,SEMI1right))::(_,(MlyValue.Plus_List_4 Plus_List_4,_,_))
::(_,(MlyValue.type_spec type_spec,_,_))::(_,(_,KW_typedef1left,_))::
rest671) => let val result=MlyValue.declaration((
P.Type (NONE,type_spec,Plus_List_4)))
 in (LrTable.NT 3,(result,KW_typedef1left,SEMI1right),rest671) end
| (79,(_,(_,_,SEMI1right))::(_,(MlyValue.Plus_List_4 Plus_List_4,_,_))
::(_,(MlyValue.type_spec type_spec,_,_))::_::(_,(MlyValue.Plus_List_3 
Plus_List_3,_,_))::_::(_,(_,KW_typedef1left,_))::rest671) => let val 
result=MlyValue.declaration((
P.Type (SOME (Plus_List_3),type_spec,Plus_List_4)))
 in (LrTable.NT 3,(result,KW_typedef1left,SEMI1right),rest671) end
| (80,(_,(_,_,SEMI1right))::(_,(MlyValue.const_exp const_exp,_,_))::_
::(_,(MlyValue.ID ID,_,_))::(_,(MlyValue.const_type_spec 
const_type_spec,_,_))::(_,(_,KW_const1left,_))::rest671) => let val 
result=MlyValue.declaration((P.Const (const_type_spec,ID,const_exp)))
 in (LrTable.NT 3,(result,KW_const1left,SEMI1right),rest671) end
| (81,(_,(_,_,SEMI1right))::(_,(MlyValue.tagged_declarator 
tagged_declarator,tagged_declarator1left,_))::rest671) => let val 
result=MlyValue.declaration((P.Tagged (tagged_declarator)))
 in (LrTable.NT 3,(result,tagged_declarator1left,SEMI1right),rest671)
 end
| (82,(_,(_,_,SEMI1right))::(_,(MlyValue.param_declarators 
param_declarators,_,_))::(_,(MlyValue.ID ID,_,_))::(_,(
MlyValue.simple_type_spec simple_type_spec,simple_type_spec1left,_))::
rest671) => let val result=MlyValue.declaration((
P.Operation (NONE,simple_type_spec,ID,param_declarators)))
 in (LrTable.NT 3,(result,simple_type_spec1left,SEMI1right),rest671)
 end
| (83,(_,(_,_,SEMI1right))::(_,(MlyValue.param_declarators 
param_declarators,_,_))::(_,(MlyValue.ID ID,_,_))::(_,(
MlyValue.simple_type_spec simple_type_spec,_,_))::_::(_,(
MlyValue.Plus_List_5 Plus_List_5,_,_))::(_,(_,LBRACK1left,_))::rest671
) => let val result=MlyValue.declaration((
P.Operation (SOME (Plus_List_5),simple_type_spec,ID,param_declarators)
))
 in (LrTable.NT 3,(result,LBRACK1left,SEMI1right),rest671) end
| (84,(_,(MlyValue.primitive_integer_type primitive_integer_type,
primitive_integer_type1left,primitive_integer_type1right))::rest671)
 => let val result=MlyValue.const_type_spec((
P.CT_Integer (primitive_integer_type)))
 in (LrTable.NT 4,(result,primitive_integer_type1left,
primitive_integer_type1right),rest671) end
| (85,(_,(_,KW_char1left,KW_char1right))::rest671) => let val result=
MlyValue.const_type_spec((P.CT_Char))
 in (LrTable.NT 4,(result,KW_char1left,KW_char1right),rest671) end
| (86,(_,(_,KW_boolean1left,KW_boolean1right))::rest671) => let val 
result=MlyValue.const_type_spec((P.CT_Bool))
 in (LrTable.NT 4,(result,KW_boolean1left,KW_boolean1right),rest671)
 end
| (87,(_,(MlyValue.ASTERISK ASTERISK,_,ASTERISK1right))::(_,(_,
KW_void1left,_))::rest671) => let val result=MlyValue.const_type_spec(
(P.CT_VoidPtr (ASTERISK)))
 in (LrTable.NT 4,(result,KW_void1left,ASTERISK1right),rest671) end
| (88,(_,(MlyValue.ASTERISK ASTERISK,_,ASTERISK1right))::(_,(_,
KW_char1left,_))::rest671) => let val result=MlyValue.const_type_spec(
(P.CT_CharPtr (ASTERISK)))
 in (LrTable.NT 4,(result,KW_char1left,ASTERISK1right),rest671) end
| (89,(_,(MlyValue.integer_const_exp integer_const_exp,
integer_const_exp1left,integer_const_exp1right))::rest671) => let val 
result=MlyValue.const_exp((P.CE_Integer (integer_const_exp)))
 in (LrTable.NT 5,(result,integer_const_exp1left,
integer_const_exp1right),rest671) end
| (90,(_,(MlyValue.STRING STRING,STRING1left,STRING1right))::rest671)
 => let val result=MlyValue.const_exp((P.CE_String (STRING)))
 in (LrTable.NT 5,(result,STRING1left,STRING1right),rest671) end
| (91,(_,(_,KW_TRUE1left,KW_TRUE1right))::rest671) => let val result=
MlyValue.const_exp((P.CE_True))
 in (LrTable.NT 5,(result,KW_TRUE1left,KW_TRUE1right),rest671) end
| (92,(_,(_,KW_FALSE1left,KW_FALSE1right))::rest671) => let val result
=MlyValue.const_exp((P.CE_False))
 in (LrTable.NT 5,(result,KW_FALSE1left,KW_FALSE1right),rest671) end
| (93,(_,(_,KW_NULL1left,KW_NULL1right))::rest671) => let val result=
MlyValue.const_exp((P.CE_Null))
 in (LrTable.NT 5,(result,KW_NULL1left,KW_NULL1right),rest671) end
| (94,(_,(MlyValue.ID ID,ID1left,ID1right))::rest671) => let val 
result=MlyValue.const_exp((P.CE_Id (ID)))
 in (LrTable.NT 5,(result,ID1left,ID1right),rest671) end
| (95,(_,(MlyValue.INT32 INT32,INT321left,INT321right))::rest671) => 
let val result=MlyValue.integer_const_exp((P.CE_Int (INT32)))
 in (LrTable.NT 6,(result,INT321left,INT321right),rest671) end
| (96,(_,(MlyValue.WORD32 WORD32,WORD321left,WORD321right))::rest671)
 => let val result=MlyValue.integer_const_exp((P.CE_Word (WORD32)))
 in (LrTable.NT 6,(result,WORD321left,WORD321right),rest671) end
| (97,(_,(MlyValue.simple_type_spec simple_type_spec,
simple_type_spec1left,simple_type_spec1right))::rest671) => let val 
result=MlyValue.type_spec((P.TS_Simple (simple_type_spec)))
 in (LrTable.NT 7,(result,simple_type_spec1left,simple_type_spec1right
),rest671) end
| (98,(_,(MlyValue.constructed_type_spec constructed_type_spec,
constructed_type_spec1left,constructed_type_spec1right))::rest671) => 
let val result=MlyValue.type_spec((
P.TS_Constructed (constructed_type_spec)))
 in (LrTable.NT 7,(result,constructed_type_spec1left,
constructed_type_spec1right),rest671) end
| (99,(_,(_,KW_float1left,KW_float1right))::rest671) => let val result
=MlyValue.simple_type_spec((P.Float))
 in (LrTable.NT 8,(result,KW_float1left,KW_float1right),rest671) end
| (100,(_,(_,KW_double1left,KW_double1right))::rest671) => let val 
result=MlyValue.simple_type_spec((P.Double))
 in (LrTable.NT 8,(result,KW_double1left,KW_double1right),rest671) end
| (101,(_,(MlyValue.integer_type integer_type,integer_type1left,
integer_type1right))::rest671) => let val result=
MlyValue.simple_type_spec((P.Integer (integer_type)))
 in (LrTable.NT 8,(result,integer_type1left,integer_type1right),
rest671) end
| (102,(_,(MlyValue.char_type char_type,char_type1left,char_type1right
))::rest671) => let val result=MlyValue.simple_type_spec((
P.Character (char_type)))
 in (LrTable.NT 8,(result,char_type1left,char_type1right),rest671) end
| (103,(_,(_,KW_boolean1left,KW_boolean1right))::rest671) => let val 
result=MlyValue.simple_type_spec((P.Bool))
 in (LrTable.NT 8,(result,KW_boolean1left,KW_boolean1right),rest671)
 end
| (104,(_,(_,KW_byte1left,KW_byte1right))::rest671) => let val result=
MlyValue.simple_type_spec((P.Byte))
 in (LrTable.NT 8,(result,KW_byte1left,KW_byte1right),rest671) end
| (105,(_,(_,KW_void1left,KW_void1right))::rest671) => let val result=
MlyValue.simple_type_spec((P.Void))
 in (LrTable.NT 8,(result,KW_void1left,KW_void1right),rest671) end
| (106,(_,(_,KW_handle_t1left,KW_handle_t1right))::rest671) => let 
val result=MlyValue.simple_type_spec((P.Handle))
 in (LrTable.NT 8,(result,KW_handle_t1left,KW_handle_t1right),rest671)
 end
| (107,(_,(_,KW_error_status_t1left,KW_error_status_t1right))::rest671
) => let val result=MlyValue.simple_type_spec((P.ErrorStatus))
 in (LrTable.NT 8,(result,KW_error_status_t1left,
KW_error_status_t1right),rest671) end
| (108,(_,(_,KW_ISO_LATIN11left,KW_ISO_LATIN11right))::rest671) => 
let val result=MlyValue.simple_type_spec((P.IsoLatin1))
 in (LrTable.NT 8,(result,KW_ISO_LATIN11left,KW_ISO_LATIN11right),
rest671) end
| (109,(_,(_,KW_ISO_MULTILINGUAL1left,KW_ISO_MULTILINGUAL1right))::
rest671) => let val result=MlyValue.simple_type_spec((P.IsoMulti))
 in (LrTable.NT 8,(result,KW_ISO_MULTILINGUAL1left,
KW_ISO_MULTILINGUAL1right),rest671) end
| (110,(_,(_,KW_ISO_UCS1left,KW_ISO_UCS1right))::rest671) => let val 
result=MlyValue.simple_type_spec((P.IsoUcs))
 in (LrTable.NT 8,(result,KW_ISO_UCS1left,KW_ISO_UCS1right),rest671)
 end
| (111,(_,(MlyValue.ID ID,ID1left,ID1right))::rest671) => let val 
result=MlyValue.simple_type_spec((P.TS_Id (ID)))
 in (LrTable.NT 8,(result,ID1left,ID1right),rest671) end
| (112,(_,(_,KW_sml_value1left,KW_sml_value1right))::rest671) => let 
val result=MlyValue.simple_type_spec((P.SmlValue))
 in (LrTable.NT 8,(result,KW_sml_value1left,KW_sml_value1right),
rest671) end
| (113,(_,(MlyValue.direct_declarator direct_declarator,_,
direct_declarator1right))::(_,(MlyValue.List_6 List_6,List_61left,_))
::rest671) => let val result=MlyValue.declarator((
P.Decl (List_6,direct_declarator)))
 in (LrTable.NT 9,(result,List_61left,direct_declarator1right),rest671
) end
| (114,(_,(MlyValue.ID ID,ID1left,ID1right))::rest671) => let val 
result=MlyValue.direct_declarator((P.D_Id (ID)))
 in (LrTable.NT 10,(result,ID1left,ID1right),rest671) end
| (115,(_,(_,_,RPAREN1right))::(_,(MlyValue.ID ID,_,_))::(_,(_,
LPAREN1left,_))::rest671) => let val result=MlyValue.direct_declarator
((P.D_PId (ID)))
 in (LrTable.NT 10,(result,LPAREN1left,RPAREN1right),rest671) end
| (116,(_,(MlyValue.array_declarator array_declarator,
array_declarator1left,array_declarator1right))::rest671) => let val 
result=MlyValue.direct_declarator((P.D_Array (array_declarator)))
 in (LrTable.NT 10,(result,array_declarator1left,
array_declarator1right),rest671) end
| (117,(_,(MlyValue.function_declarator function_declarator,
function_declarator1left,function_declarator1right))::rest671) => let 
val result=MlyValue.direct_declarator((
P.D_Function (function_declarator)))
 in (LrTable.NT 10,(result,function_declarator1left,
function_declarator1right),rest671) end
| (118,(_,(MlyValue.tagged_struct_declarator tagged_struct_declarator,
tagged_struct_declarator1left,tagged_struct_declarator1right))::
rest671) => let val result=MlyValue.tagged_declarator((
P.TG_Struct (tagged_struct_declarator)))
 in (LrTable.NT 11,(result,tagged_struct_declarator1left,
tagged_struct_declarator1right),rest671) end
| (119,(_,(MlyValue.tagged_union_declarator tagged_union_declarator,
tagged_union_declarator1left,tagged_union_declarator1right))::rest671)
 => let val result=MlyValue.tagged_declarator((
P.TG_Union (tagged_union_declarator)))
 in (LrTable.NT 11,(result,tagged_union_declarator1left,
tagged_union_declarator1right),rest671) end
| (120,(_,(MlyValue.primitive_integer_type primitive_integer_type,
primitive_integer_type1left,primitive_integer_type1right))::rest671)
 => let val result=MlyValue.integer_type((
P.PrimitiveInteger (primitive_integer_type)))
 in (LrTable.NT 12,(result,primitive_integer_type1left,
primitive_integer_type1right),rest671) end
| (121,(_,(_,KW_hyper1left,KW_hyper1right))::rest671) => let val 
result=MlyValue.integer_type((P.HInt))
 in (LrTable.NT 12,(result,KW_hyper1left,KW_hyper1right),rest671) end
| (122,(_,(_,_,KW_int1right))::(_,(_,KW_hyper1left,_))::rest671) => 
let val result=MlyValue.integer_type((P.HInt))
 in (LrTable.NT 12,(result,KW_hyper1left,KW_int1right),rest671) end
| (123,(_,(_,_,KW_unsigned1right))::(_,(_,KW_hyper1left,_))::rest671)
 => let val result=MlyValue.integer_type((P.HUInt))
 in (LrTable.NT 12,(result,KW_hyper1left,KW_unsigned1right),rest671)
 end
| (124,(_,(_,_,KW_int1right))::_::(_,(_,KW_hyper1left,_))::rest671)
 => let val result=MlyValue.integer_type((P.HUInt))
 in (LrTable.NT 12,(result,KW_hyper1left,KW_int1right),rest671) end
| (125,(_,(_,_,KW_hyper1right))::(_,(_,KW_unsigned1left,_))::rest671)
 => let val result=MlyValue.integer_type((P.UHInt))
 in (LrTable.NT 12,(result,KW_unsigned1left,KW_hyper1right),rest671)
 end
| (126,(_,(_,_,KW_int1right))::_::(_,(_,KW_unsigned1left,_))::rest671)
 => let val result=MlyValue.integer_type((P.UHInt))
 in (LrTable.NT 12,(result,KW_unsigned1left,KW_int1right),rest671) end
| (127,(_,(MlyValue.signed_integer signed_integer,signed_integer1left,
signed_integer1right))::rest671) => let val result=
MlyValue.primitive_integer_type((P.Signed (signed_integer)))
 in (LrTable.NT 13,(result,signed_integer1left,signed_integer1right),
rest671) end
| (128,(_,(MlyValue.unsigned_integer unsigned_integer,
unsigned_integer1left,unsigned_integer1right))::rest671) => let val 
result=MlyValue.primitive_integer_type((P.Unsigned (unsigned_integer))
)
 in (LrTable.NT 13,(result,unsigned_integer1left,
unsigned_integer1right),rest671) end
| (129,(_,(_,KW_sml_int1left,KW_sml_int1right))::rest671) => let val 
result=MlyValue.primitive_integer_type((P.SmlInt))
 in (LrTable.NT 13,(result,KW_sml_int1left,KW_sml_int1right),rest671)
 end
| (130,(_,(_,KW_sml_word1left,KW_sml_word1right))::rest671) => let 
val result=MlyValue.primitive_integer_type((P.SmlWord))
 in (LrTable.NT 13,(result,KW_sml_word1left,KW_sml_word1right),rest671
) end
| (131,(_,(_,KW_long1left,KW_long1right))::rest671) => let val result=
MlyValue.signed_integer((P.Long))
 in (LrTable.NT 14,(result,KW_long1left,KW_long1right),rest671) end
| (132,(_,(_,_,KW_int1right))::(_,(_,KW_long1left,_))::rest671) => 
let val result=MlyValue.signed_integer((P.Long))
 in (LrTable.NT 14,(result,KW_long1left,KW_int1right),rest671) end
| (133,(_,(_,KW_short1left,KW_short1right))::rest671) => let val 
result=MlyValue.signed_integer((P.Short))
 in (LrTable.NT 14,(result,KW_short1left,KW_short1right),rest671) end
| (134,(_,(_,_,KW_int1right))::(_,(_,KW_short1left,_))::rest671) => 
let val result=MlyValue.signed_integer((P.Short))
 in (LrTable.NT 14,(result,KW_short1left,KW_int1right),rest671) end
| (135,(_,(_,KW_small1left,KW_small1right))::rest671) => let val 
result=MlyValue.signed_integer((P.Small))
 in (LrTable.NT 14,(result,KW_small1left,KW_small1right),rest671) end
| (136,(_,(_,_,KW_int1right))::(_,(_,KW_small1left,_))::rest671) => 
let val result=MlyValue.signed_integer((P.Small))
 in (LrTable.NT 14,(result,KW_small1left,KW_int1right),rest671) end
| (137,(_,(_,KW_int1left,KW_int1right))::rest671) => let val result=
MlyValue.signed_integer((P.Int))
 in (LrTable.NT 14,(result,KW_int1left,KW_int1right),rest671) end
| (138,(_,(_,_,KW_long1right))::(_,(_,KW_unsigned1left,_))::rest671)
 => let val result=MlyValue.unsigned_integer((P.ULong))
 in (LrTable.NT 15,(result,KW_unsigned1left,KW_long1right),rest671)
 end
| (139,(_,(_,_,KW_int1right))::_::(_,(_,KW_unsigned1left,_))::rest671)
 => let val result=MlyValue.unsigned_integer((P.ULong))
 in (LrTable.NT 15,(result,KW_unsigned1left,KW_int1right),rest671) end
| (140,(_,(_,_,KW_short1right))::(_,(_,KW_unsigned1left,_))::rest671)
 => let val result=MlyValue.unsigned_integer((P.UShort))
 in (LrTable.NT 15,(result,KW_unsigned1left,KW_short1right),rest671)
 end
| (141,(_,(_,_,KW_int1right))::_::(_,(_,KW_unsigned1left,_))::rest671)
 => let val result=MlyValue.unsigned_integer((P.UShort))
 in (LrTable.NT 15,(result,KW_unsigned1left,KW_int1right),rest671) end
| (142,(_,(_,_,KW_small1right))::(_,(_,KW_unsigned1left,_))::rest671)
 => let val result=MlyValue.unsigned_integer((P.USmall))
 in (LrTable.NT 15,(result,KW_unsigned1left,KW_small1right),rest671)
 end
| (143,(_,(_,_,KW_int1right))::_::(_,(_,KW_unsigned1left,_))::rest671)
 => let val result=MlyValue.unsigned_integer((P.USmall))
 in (LrTable.NT 15,(result,KW_unsigned1left,KW_int1right),rest671) end
| (144,(_,(_,_,KW_int1right))::(_,(_,KW_unsigned1left,_))::rest671)
 => let val result=MlyValue.unsigned_integer((P.UInt))
 in (LrTable.NT 15,(result,KW_unsigned1left,KW_int1right),rest671) end
| (145,(_,(_,_,KW_unsigned1right))::(_,(_,KW_long1left,_))::rest671)
 => let val result=MlyValue.unsigned_integer((P.LongU))
 in (LrTable.NT 15,(result,KW_long1left,KW_unsigned1right),rest671)
 end
| (146,(_,(_,_,KW_int1right))::_::(_,(_,KW_long1left,_))::rest671) => 
let val result=MlyValue.unsigned_integer((P.LongU))
 in (LrTable.NT 15,(result,KW_long1left,KW_int1right),rest671) end
| (147,(_,(_,_,KW_unsigned1right))::(_,(_,KW_short1left,_))::rest671)
 => let val result=MlyValue.unsigned_integer((P.ShortU))
 in (LrTable.NT 15,(result,KW_short1left,KW_unsigned1right),rest671)
 end
| (148,(_,(_,_,KW_int1right))::_::(_,(_,KW_short1left,_))::rest671)
 => let val result=MlyValue.unsigned_integer((P.ShortU))
 in (LrTable.NT 15,(result,KW_short1left,KW_int1right),rest671) end
| (149,(_,(_,_,KW_unsigned1right))::(_,(_,KW_small1left,_))::rest671)
 => let val result=MlyValue.unsigned_integer((P.SmallU))
 in (LrTable.NT 15,(result,KW_small1left,KW_unsigned1right),rest671)
 end
| (150,(_,(_,_,KW_int1right))::_::(_,(_,KW_small1left,_))::rest671)
 => let val result=MlyValue.unsigned_integer((P.SmallU))
 in (LrTable.NT 15,(result,KW_small1left,KW_int1right),rest671) end
| (151,(_,(_,_,KW_char1right))::(_,(_,KW_unsigned1left,_))::rest671)
 => let val result=MlyValue.char_type((P.UChar))
 in (LrTable.NT 16,(result,KW_unsigned1left,KW_char1right),rest671)
 end
| (152,(_,(_,KW_char1left,KW_char1right))::rest671) => let val result=
MlyValue.char_type((P.Char))
 in (LrTable.NT 16,(result,KW_char1left,KW_char1right),rest671) end
| (153,(_,(_,_,KW_wchar_t1right))::(_,(_,KW_unsigned1left,_))::rest671
) => let val result=MlyValue.char_type((P.UWChar))
 in (LrTable.NT 16,(result,KW_unsigned1left,KW_wchar_t1right),rest671)
 end
| (154,(_,(_,KW_wchar_t1left,KW_wchar_t1right))::rest671) => let val 
result=MlyValue.char_type((P.WChar))
 in (LrTable.NT 16,(result,KW_wchar_t1left,KW_wchar_t1right),rest671)
 end
| (155,(_,(_,_,RBRACE1right))::(_,(MlyValue.Plus_List_7 Plus_List_7,_,
_))::_::(_,(_,KW_struct1left,_))::rest671) => let val result=
MlyValue.constructed_type_spec((P.Struct (Plus_List_7)))
 in (LrTable.NT 17,(result,KW_struct1left,RBRACE1right),rest671) end
| (156,(_,(MlyValue.union_type union_type,union_type1left,
union_type1right))::rest671) => let val result=
MlyValue.constructed_type_spec((P.Union (union_type)))
 in (LrTable.NT 17,(result,union_type1left,union_type1right),rest671)
 end
| (157,(_,(_,_,RBRACE1right))::(_,(MlyValue.Plus_List_8 Plus_List_8,_,
_))::_::(_,(_,KW_enum1left,_))::rest671) => let val result=
MlyValue.constructed_type_spec((P.Enum (Plus_List_8)))
 in (LrTable.NT 17,(result,KW_enum1left,RBRACE1right),rest671) end
| (158,(_,(MlyValue.tagged_declarator tagged_declarator,
tagged_declarator1left,tagged_declarator1right))::rest671) => let val 
result=MlyValue.constructed_type_spec((P.TaggedD (tagged_declarator)))
 in (LrTable.NT 17,(result,tagged_declarator1left,
tagged_declarator1right),rest671) end
| (159,(_,(MlyValue.ID ID,_,ID1right))::(_,(_,KW_struct1left,_))::
rest671) => let val result=MlyValue.tagged_struct_declarator((
P.S_Tag (ID)))
 in (LrTable.NT 18,(result,KW_struct1left,ID1right),rest671) end
| (160,(_,(_,_,RBRACE1right))::(_,(MlyValue.Plus_List_9 Plus_List_9,_,
_))::_::(_,(MlyValue.ID ID,_,_))::(_,(_,KW_struct1left,_))::rest671)
 => let val result=MlyValue.tagged_struct_declarator((
P.S_TagBody (ID,Plus_List_9)))
 in (LrTable.NT 18,(result,KW_struct1left,RBRACE1right),rest671) end
| (161,(_,(MlyValue.Plus_List_11 Plus_List_11,_,Plus_List_111right))::
(_,(MlyValue.type_spec type_spec,type_spec1left,_))::rest671) => let 
val result=MlyValue.member((P.Field (NONE,type_spec,Plus_List_11)))
 in (LrTable.NT 19,(result,type_spec1left,Plus_List_111right),rest671)
 end
| (162,(_,(MlyValue.Plus_List_11 Plus_List_11,_,Plus_List_111right))::
(_,(MlyValue.type_spec type_spec,_,_))::_::(_,(MlyValue.Plus_List_10 
Plus_List_10,_,_))::(_,(_,LBRACK1left,_))::rest671) => let val result=
MlyValue.member((P.Field (SOME (Plus_List_10),type_spec,Plus_List_11))
)
 in (LrTable.NT 19,(result,LBRACK1left,Plus_List_111right),rest671)
 end
| (163,(_,(MlyValue.ID ID,_,ID1right))::(_,(_,KW_union1left,_))::
rest671) => let val result=MlyValue.tagged_union_declarator((
P.U_Tag (ID)))
 in (LrTable.NT 20,(result,KW_union1left,ID1right),rest671) end
| (164,(_,(MlyValue.tagged_union tagged_union,tagged_union1left,
tagged_union1right))::rest671) => let val result=
MlyValue.tagged_union_declarator((P.U_TagBody (tagged_union)))
 in (LrTable.NT 20,(result,tagged_union1left,tagged_union1right),
rest671) end
| (165,(_,(_,_,RBRACE1right))::(_,(MlyValue.union_body union_body,_,_)
)::_::_::(_,(MlyValue.ID ID,_,_))::(_,(MlyValue.switch_type_spec 
switch_type_spec,_,_))::_::_::(_,(_,KW_union1left,_))::rest671) => 
let val result=MlyValue.union_type((
P.EUnion (switch_type_spec,ID,NONE,union_body)))
 in (LrTable.NT 21,(result,KW_union1left,RBRACE1right),rest671) end
| (166,(_,(_,_,RBRACE1right))::(_,(MlyValue.union_body union_body,_,_)
)::_::(_,(MlyValue.ID ID2,_,_))::_::(_,(MlyValue.ID ID1,_,_))::(_,(
MlyValue.switch_type_spec switch_type_spec,_,_))::_::_::(_,(_,
KW_union1left,_))::rest671) => let val result=MlyValue.union_type((
P.EUnion (switch_type_spec,ID1,SOME (ID2),union_body)))
 in (LrTable.NT 21,(result,KW_union1left,RBRACE1right),rest671) end
| (167,(_,(_,_,RBRACE1right))::(_,(MlyValue.union_body_ne 
union_body_ne,_,_))::_::(_,(_,KW_union1left,_))::rest671) => let val 
result=MlyValue.union_type((P.NEUnion (union_body_ne)))
 in (LrTable.NT 21,(result,KW_union1left,RBRACE1right),rest671) end
| (168,(_,(MlyValue.primitive_integer_type primitive_integer_type,
primitive_integer_type1left,primitive_integer_type1right))::rest671)
 => let val result=MlyValue.switch_type_spec((
P.SW_Integer (primitive_integer_type)))
 in (LrTable.NT 22,(result,primitive_integer_type1left,
primitive_integer_type1right),rest671) end
| (169,(_,(MlyValue.char_type char_type,char_type1left,char_type1right
))::rest671) => let val result=MlyValue.switch_type_spec((
P.SW_Char (char_type)))
 in (LrTable.NT 22,(result,char_type1left,char_type1right),rest671)
 end
| (170,(_,(_,KW_boolean1left,KW_boolean1right))::rest671) => let val 
result=MlyValue.switch_type_spec((P.SW_Bool))
 in (LrTable.NT 22,(result,KW_boolean1left,KW_boolean1right),rest671)
 end
| (171,(_,(MlyValue.ID ID,ID1left,ID1right))::rest671) => let val 
result=MlyValue.switch_type_spec((P.SW_Id (ID)))
 in (LrTable.NT 22,(result,ID1left,ID1right),rest671) end
| (172,(_,(_,_,RBRACE1right))::(_,(MlyValue.union_body union_body,_,_)
)::_::_::(_,(MlyValue.ID ID2,_,_))::(_,(MlyValue.switch_type_spec 
switch_type_spec,_,_))::_::_::(_,(MlyValue.ID ID1,_,_))::(_,(_,
KW_union1left,_))::rest671) => let val result=MlyValue.tagged_union((
P.TaggedEUnion (ID1,switch_type_spec,ID2,NONE,union_body)))
 in (LrTable.NT 23,(result,KW_union1left,RBRACE1right),rest671) end
| (173,(_,(_,_,RBRACE1right))::(_,(MlyValue.union_body union_body,_,_)
)::_::(_,(MlyValue.ID ID3,_,_))::_::(_,(MlyValue.ID ID2,_,_))::(_,(
MlyValue.switch_type_spec switch_type_spec,_,_))::_::_::(_,(
MlyValue.ID ID1,_,_))::(_,(_,KW_union1left,_))::rest671) => let val 
result=MlyValue.tagged_union((
P.TaggedEUnion (ID1,switch_type_spec,ID2,SOME (ID3),union_body)))
 in (LrTable.NT 23,(result,KW_union1left,RBRACE1right),rest671) end
| (174,(_,(_,_,RBRACE1right))::(_,(MlyValue.union_body_ne 
union_body_ne,_,_))::_::(_,(MlyValue.ID ID,_,_))::(_,(_,KW_union1left,
_))::rest671) => let val result=MlyValue.tagged_union((
P.TaggedNEUnion (ID,union_body_ne)))
 in (LrTable.NT 23,(result,KW_union1left,RBRACE1right),rest671) end
| (175,(_,(MlyValue.Plus_List_12 Plus_List_12,Plus_List_121left,
Plus_List_121right))::rest671) => let val result=MlyValue.union_body((
P.Body (Plus_List_12)))
 in (LrTable.NT 24,(result,Plus_List_121left,Plus_List_121right),
rest671) end
| (176,(_,(MlyValue.Plus_List_13 Plus_List_13,Plus_List_131left,
Plus_List_131right))::rest671) => let val result=
MlyValue.union_body_ne((P.BodyNE (Plus_List_13)))
 in (LrTable.NT 25,(result,Plus_List_131left,Plus_List_131right),
rest671) end
| (177,(_,(MlyValue.union_arm union_arm,_,union_arm1right))::(_,(
MlyValue.Plus_List_14 Plus_List_14,Plus_List_141left,_))::rest671) => 
let val result=MlyValue.union_case((
P.UnionCase (Plus_List_14,union_arm)))
 in (LrTable.NT 26,(result,Plus_List_141left,union_arm1right),rest671)
 end
| (178,(_,(MlyValue.union_arm union_arm,_,union_arm1right))::_::(_,(_,
KW_default1left,_))::rest671) => let val result=MlyValue.union_case((
P.DefaultCase (union_arm)))
 in (LrTable.NT 26,(result,KW_default1left,union_arm1right),rest671)
 end
| (179,(_,(MlyValue.union_arm union_arm,_,union_arm1right))::_::_::(_,
(MlyValue.Plus_List_15 Plus_List_15,_,_))::_::_::(_,(_,LBRACK1left,_))
::rest671) => let val result=MlyValue.union_case_ne((
P.UnionCaseNE (Plus_List_15,union_arm)))
 in (LrTable.NT 27,(result,LBRACK1left,union_arm1right),rest671) end
| (180,(_,(MlyValue.union_arm union_arm,_,union_arm1right))::_::_::(_,
(_,LBRACK1left,_))::rest671) => let val result=MlyValue.union_case_ne(
(P.DefaultCaseNE (union_arm)))
 in (LrTable.NT 27,(result,LBRACK1left,union_arm1right),rest671) end
| (181,(_,(_,SEMI1left,SEMI1right))::rest671) => let val result=
MlyValue.union_arm((P.UnionArm (NONE)))
 in (LrTable.NT 28,(result,SEMI1left,SEMI1right),rest671) end
| (182,(_,(_,_,SEMI1right))::(_,(MlyValue.member member,member1left,_)
)::rest671) => let val result=MlyValue.union_arm((
P.UnionArm (SOME (member))))
 in (LrTable.NT 28,(result,member1left,SEMI1right),rest671) end
| (183,(_,(_,_,RPAREN1right))::(_,(MlyValue.switch_type_spec 
switch_type_spec,_,_))::_::(_,(_,KW_switch_type1left,_))::rest671) => 
let val result=MlyValue.union_type_switch_attr((
P.A_SwitchType (switch_type_spec)))
 in (LrTable.NT 29,(result,KW_switch_type1left,RPAREN1right),rest671)
 end
| (184,(_,(_,_,RPAREN1right))::(_,(MlyValue.attr_var attr_var,_,_))::_
::(_,(_,KW_switch_is1left,_))::rest671) => let val result=
MlyValue.union_instance_switch_attr((P.A_SwitchIs (attr_var)))
 in (LrTable.NT 30,(result,KW_switch_is1left,RPAREN1right),rest671)
 end
| (185,(_,(MlyValue.integer_const_exp integer_const_exp,_,
integer_const_exp1right))::_::(_,(MlyValue.ID ID,ID1left,_))::rest671)
 => let val result=MlyValue.identifier((
P.IdValue (ID,integer_const_exp)))
 in (LrTable.NT 31,(result,ID1left,integer_const_exp1right),rest671)
 end
| (186,(_,(MlyValue.ID ID,ID1left,ID1right))::rest671) => let val 
result=MlyValue.identifier((P.Id (ID)))
 in (LrTable.NT 31,(result,ID1left,ID1right),rest671) end
| (187,(_,(_,_,RBRACK1right))::_::(_,(MlyValue.direct_declarator 
direct_declarator,direct_declarator1left,_))::rest671) => let val 
result=MlyValue.array_declarator((P.ArrayOne (direct_declarator,NONE))
)
 in (LrTable.NT 32,(result,direct_declarator1left,RBRACK1right),
rest671) end
| (188,(_,(_,_,RBRACK1right))::(_,(MlyValue.array_bound array_bound,_,
_))::_::(_,(MlyValue.direct_declarator direct_declarator,
direct_declarator1left,_))::rest671) => let val result=
MlyValue.array_declarator((
P.ArrayOne (direct_declarator,SOME (array_bound))))
 in (LrTable.NT 32,(result,direct_declarator1left,RBRACK1right),
rest671) end
| (189,(_,(_,_,RBRACK1right))::(_,(MlyValue.array_bound array_bound2,_
,_))::_::(_,(MlyValue.array_bound array_bound1,_,_))::_::(_,(
MlyValue.direct_declarator direct_declarator,direct_declarator1left,_)
)::rest671) => let val result=MlyValue.array_declarator((
P.ArrayTwo (direct_declarator,array_bound1,array_bound2)))
 in (LrTable.NT 32,(result,direct_declarator1left,RBRACK1right),
rest671) end
| (190,(_,(MlyValue.ASTERISK ASTERISK,ASTERISK1left,ASTERISK1right))::
rest671) => let val result=MlyValue.array_bound((P.BoundAst (ASTERISK)
))
 in (LrTable.NT 33,(result,ASTERISK1left,ASTERISK1right),rest671) end
| (191,(_,(MlyValue.integer_const_exp integer_const_exp,
integer_const_exp1left,integer_const_exp1right))::rest671) => let val 
result=MlyValue.array_bound((P.BoundInt (integer_const_exp)))
 in (LrTable.NT 33,(result,integer_const_exp1left,
integer_const_exp1right),rest671) end
| (192,(_,(MlyValue.ID ID,ID1left,ID1right))::rest671) => let val 
result=MlyValue.array_bound((P.BoundId (ID)))
 in (LrTable.NT 33,(result,ID1left,ID1right),rest671) end
| (193,(_,(_,_,RPAREN1right))::(_,(_,LPAREN1left,_))::rest671) => let 
val result=MlyValue.param_declarators((P.Empty))
 in (LrTable.NT 34,(result,LPAREN1left,RPAREN1right),rest671) end
| (194,(_,(_,_,RPAREN1right))::_::(_,(_,LPAREN1left,_))::rest671) => 
let val result=MlyValue.param_declarators((P.EmptyVoid))
 in (LrTable.NT 34,(result,LPAREN1left,RPAREN1right),rest671) end
| (195,(_,(_,_,RPAREN1right))::(_,(MlyValue.Plus_List_16 Plus_List_16,
_,_))::(_,(_,LPAREN1left,_))::rest671) => let val result=
MlyValue.param_declarators((P.Params (Plus_List_16)))
 in (LrTable.NT 34,(result,LPAREN1left,RPAREN1right),rest671) end
| (196,(_,(MlyValue.declarator declarator,_,declarator1right))::(_,(
MlyValue.type_spec type_spec,_,_))::_::(_,(MlyValue.Plus_List_17 
Plus_List_17,_,_))::(_,(_,LBRACK1left,_))::rest671) => let val result=
MlyValue.param_declarator((P.Param (Plus_List_17,type_spec,declarator)
))
 in (LrTable.NT 35,(result,LBRACK1left,declarator1right),rest671) end
| (197,(_,(MlyValue.param_declarators param_declarators,_,
param_declarators1right))::(_,(MlyValue.direct_declarator 
direct_declarator,direct_declarator1left,_))::rest671) => let val 
result=MlyValue.function_declarator((
P.Function (direct_declarator,param_declarators)))
 in (LrTable.NT 36,(result,direct_declarator1left,
param_declarators1right),rest671) end
| (198,(_,(_,KW_in1left,KW_in1right))::rest671) => let val result=
MlyValue.param_attribute((P.A_In))
 in (LrTable.NT 37,(result,KW_in1left,KW_in1right),rest671) end
| (199,(_,(_,KW_out1left,KW_out1right))::rest671) => let val result=
MlyValue.param_attribute((P.A_Out))
 in (LrTable.NT 37,(result,KW_out1left,KW_out1right),rest671) end
| (200,(_,(MlyValue.field_attribute field_attribute,
field_attribute1left,field_attribute1right))::rest671) => let val 
result=MlyValue.param_attribute((P.A_ParamField (field_attribute)))
 in (LrTable.NT 37,(result,field_attribute1left,field_attribute1right)
,rest671) end
| (201,(_,(_,_,RPAREN1right))::(_,(MlyValue.simple_type_spec 
simple_type_spec,_,_))::_::(_,(_,KW_transmit_as1left,_))::rest671) => 
let val result=MlyValue.type_attribute((
P.A_TransmitAs (simple_type_spec)))
 in (LrTable.NT 38,(result,KW_transmit_as1left,RPAREN1right),rest671)
 end
| (202,(_,(_,KW_handle1left,KW_handle1right))::rest671) => let val 
result=MlyValue.type_attribute((P.A_Handle))
 in (LrTable.NT 38,(result,KW_handle1left,KW_handle1right),rest671)
 end
| (203,(_,(MlyValue.usage_attribute usage_attribute,
usage_attribute1left,usage_attribute1right))::rest671) => let val 
result=MlyValue.type_attribute((P.A_TypeUsage (usage_attribute)))
 in (LrTable.NT 38,(result,usage_attribute1left,usage_attribute1right)
,rest671) end
| (204,(_,(MlyValue.union_type_switch_attr union_type_switch_attr,
union_type_switch_attr1left,union_type_switch_attr1right))::rest671)
 => let val result=MlyValue.type_attribute((
P.A_TypeUnion (union_type_switch_attr)))
 in (LrTable.NT 38,(result,union_type_switch_attr1left,
union_type_switch_attr1right),rest671) end
| (205,(_,(MlyValue.ptr_attribute ptr_attribute,ptr_attribute1left,
ptr_attribute1right))::rest671) => let val result=
MlyValue.type_attribute((P.A_TypePtr (ptr_attribute)))
 in (LrTable.NT 38,(result,ptr_attribute1left,ptr_attribute1right),
rest671) end
| (206,(_,(_,KW_exclude1left,KW_exclude1right))::rest671) => let val 
result=MlyValue.type_attribute((P.A_Exclude))
 in (LrTable.NT 38,(result,KW_exclude1left,KW_exclude1right),rest671)
 end
| (207,(_,(_,KW_abstract1left,KW_abstract1right))::rest671) => let 
val result=MlyValue.type_attribute((P.A_Abstract))
 in (LrTable.NT 38,(result,KW_abstract1left,KW_abstract1right),rest671
) end
| (208,(_,(_,KW_string1left,KW_string1right))::rest671) => let val 
result=MlyValue.usage_attribute((P.A_String))
 in (LrTable.NT 39,(result,KW_string1left,KW_string1right),rest671)
 end
| (209,(_,(_,KW_context_handle1left,KW_context_handle1right))::rest671
) => let val result=MlyValue.usage_attribute((P.A_ContextHandle))
 in (LrTable.NT 39,(result,KW_context_handle1left,
KW_context_handle1right),rest671) end
| (210,(_,(_,_,RPAREN1right))::(_,(MlyValue.STRING STRING,_,_))::_::(_
,(_,KW_sml_type1left,_))::rest671) => let val result=
MlyValue.usage_attribute((P.A_SmlType (STRING)))
 in (LrTable.NT 39,(result,KW_sml_type1left,RPAREN1right),rest671) end
| (211,(_,(_,_,RPAREN1right))::(_,(MlyValue.Plus_List_18 Plus_List_18,
_,_))::_::(_,(_,KW_first_is1left,_))::rest671) => let val result=
MlyValue.field_attribute((P.A_FirstIs (Plus_List_18)))
 in (LrTable.NT 40,(result,KW_first_is1left,RPAREN1right),rest671) end
| (212,(_,(_,_,RPAREN1right))::(_,(MlyValue.Plus_List_19 Plus_List_19,
_,_))::_::(_,(_,KW_last_is1left,_))::rest671) => let val result=
MlyValue.field_attribute((P.A_LastIs (Plus_List_19)))
 in (LrTable.NT 40,(result,KW_last_is1left,RPAREN1right),rest671) end
| (213,(_,(_,_,RPAREN1right))::(_,(MlyValue.Plus_List_20 Plus_List_20,
_,_))::_::(_,(_,KW_length_is1left,_))::rest671) => let val result=
MlyValue.field_attribute((P.A_LengthIs (Plus_List_20)))
 in (LrTable.NT 40,(result,KW_length_is1left,RPAREN1right),rest671)
 end
| (214,(_,(_,_,RPAREN1right))::(_,(MlyValue.Plus_List_21 Plus_List_21,
_,_))::_::(_,(_,KW_min_is1left,_))::rest671) => let val result=
MlyValue.field_attribute((P.A_MinIs (Plus_List_21)))
 in (LrTable.NT 40,(result,KW_min_is1left,RPAREN1right),rest671) end
| (215,(_,(_,_,RPAREN1right))::(_,(MlyValue.Plus_List_22 Plus_List_22,
_,_))::_::(_,(_,KW_max_is1left,_))::rest671) => let val result=
MlyValue.field_attribute((P.A_MaxIs (Plus_List_22)))
 in (LrTable.NT 40,(result,KW_max_is1left,RPAREN1right),rest671) end
| (216,(_,(_,_,RPAREN1right))::(_,(MlyValue.Plus_List_23 Plus_List_23,
_,_))::_::(_,(_,KW_size_is1left,_))::rest671) => let val result=
MlyValue.field_attribute((P.A_SizeIs (Plus_List_23)))
 in (LrTable.NT 40,(result,KW_size_is1left,RPAREN1right),rest671) end
| (217,(_,(MlyValue.usage_attribute usage_attribute,
usage_attribute1left,usage_attribute1right))::rest671) => let val 
result=MlyValue.field_attribute((P.A_FieldUsage (usage_attribute)))
 in (LrTable.NT 40,(result,usage_attribute1left,usage_attribute1right)
,rest671) end
| (218,(_,(MlyValue.union_instance_switch_attr 
union_instance_switch_attr,union_instance_switch_attr1left,
union_instance_switch_attr1right))::rest671) => let val result=
MlyValue.field_attribute((P.A_FieldUnion (union_instance_switch_attr))
)
 in (LrTable.NT 40,(result,union_instance_switch_attr1left,
union_instance_switch_attr1right),rest671) end
| (219,(_,(_,KW_ignore1left,KW_ignore1right))::rest671) => let val 
result=MlyValue.field_attribute((P.A_Ignore))
 in (LrTable.NT 40,(result,KW_ignore1left,KW_ignore1right),rest671)
 end
| (220,(_,(MlyValue.ptr_attribute ptr_attribute,ptr_attribute1left,
ptr_attribute1right))::rest671) => let val result=
MlyValue.field_attribute((P.A_FieldPtr (ptr_attribute)))
 in (LrTable.NT 40,(result,ptr_attribute1left,ptr_attribute1right),
rest671) end
| (221,(_,(MlyValue.ID ID,_,ID1right))::(_,(MlyValue.ASTERISK ASTERISK
,ASTERISK1left,_))::rest671) => let val result=MlyValue.attr_var((
P.VarPtr (ASTERISK,ID)))
 in (LrTable.NT 41,(result,ASTERISK1left,ID1right),rest671) end
| (222,(_,(MlyValue.ID ID,ID1left,ID1right))::rest671) => let val 
result=MlyValue.attr_var((P.Var (ID)))
 in (LrTable.NT 41,(result,ID1left,ID1right),rest671) end
| (223,(_,(_,KW_ref1left,KW_ref1right))::rest671) => let val result=
MlyValue.ptr_attribute((P.A_Ref))
 in (LrTable.NT 42,(result,KW_ref1left,KW_ref1right),rest671) end
| (224,(_,(_,KW_unique1left,KW_unique1right))::rest671) => let val 
result=MlyValue.ptr_attribute((P.A_Unique))
 in (LrTable.NT 42,(result,KW_unique1left,KW_unique1right),rest671)
 end
| (225,(_,(_,KW_ptr1left,KW_ptr1right))::rest671) => let val result=
MlyValue.ptr_attribute((P.A_Ptr))
 in (LrTable.NT 42,(result,KW_ptr1left,KW_ptr1right),rest671) end
| (226,(_,(_,KW_idempotent1left,KW_idempotent1right))::rest671) => 
let val result=MlyValue.operation_attribute((P.A_Idempotent))
 in (LrTable.NT 43,(result,KW_idempotent1left,KW_idempotent1right),
rest671) end
| (227,(_,(_,KW_broadcast1left,KW_broadcast1right))::rest671) => let 
val result=MlyValue.operation_attribute((P.A_Broadcast))
 in (LrTable.NT 43,(result,KW_broadcast1left,KW_broadcast1right),
rest671) end
| (228,(_,(_,KW_maybe1left,KW_maybe1right))::rest671) => let val 
result=MlyValue.operation_attribute((P.A_Maybe))
 in (LrTable.NT 43,(result,KW_maybe1left,KW_maybe1right),rest671) end
| (229,(_,(_,KW_reflect_deletions1left,KW_reflect_deletions1right))::
rest671) => let val result=MlyValue.operation_attribute((
P.A_ReflectDeletions))
 in (LrTable.NT 43,(result,KW_reflect_deletions1left,
KW_reflect_deletions1right),rest671) end
| (230,(_,(MlyValue.usage_attribute usage_attribute,
usage_attribute1left,usage_attribute1right))::rest671) => let val 
result=MlyValue.operation_attribute((
P.A_OperationUsage (usage_attribute)))
 in (LrTable.NT 43,(result,usage_attribute1left,usage_attribute1right)
,rest671) end
| (231,(_,(MlyValue.ptr_attribute ptr_attribute,ptr_attribute1left,
ptr_attribute1right))::rest671) => let val result=
MlyValue.operation_attribute((P.A_OperationPtr (ptr_attribute)))
 in (LrTable.NT 43,(result,ptr_attribute1left,ptr_attribute1right),
rest671) end
| (232,(_,(_,KW_sml_context1left,KW_sml_context1right))::rest671) => 
let val result=MlyValue.operation_attribute((P.A_SmlContext))
 in (LrTable.NT 43,(result,KW_sml_context1left,KW_sml_context1right),
rest671) end
| (233,(_,(_,_,RPAREN1right))::(_,(MlyValue.STRING STRING,_,_))::_::(_
,(_,KW_pre1left,_))::rest671) => let val result=
MlyValue.operation_attribute((P.A_Pre (STRING)))
 in (LrTable.NT 43,(result,KW_pre1left,RPAREN1right),rest671) end
| (234,(_,(_,_,RPAREN1right))::(_,(MlyValue.STRING STRING,_,_))::_::(_
,(_,KW_post1left,_))::rest671) => let val result=
MlyValue.operation_attribute((P.A_Post (STRING)))
 in (LrTable.NT 43,(result,KW_post1left,RPAREN1right),rest671) end
| (235,(_,(_,_,RPAREN1right))::(_,(MlyValue.STRING STRING,_,_))::_::(_
,(_,KW_call1left,_))::rest671) => let val result=
MlyValue.operation_attribute((P.A_Call (STRING)))
 in (LrTable.NT 43,(result,KW_call1left,RPAREN1right),rest671) end
| (236,(_,(MlyValue.List_1 List_1,_,List_11right))::(_,(
MlyValue.top_level top_level,top_level1left,_))::rest671) => let val 
result=MlyValue.List_1(((top_level)::List_1))
 in (LrTable.NT 44,(result,top_level1left,List_11right),rest671) end
| (237,rest671) => let val result=MlyValue.List_1(([]))
 in (LrTable.NT 44,(result,defaultPos,defaultPos),rest671) end
| (238,(_,(MlyValue.List_2 List_2,_,List_21right))::(_,(
MlyValue.STRING STRING,STRING1left,_))::rest671) => let val result=
MlyValue.Plus_List_2(((STRING)::List_2))
 in (LrTable.NT 46,(result,STRING1left,List_21right),rest671) end
| (239,(_,(MlyValue.List_2 List_2,_,List_21right))::(_,(
MlyValue.STRING STRING,_,_))::(_,(_,COMMA1left,_))::rest671) => let 
val result=MlyValue.List_2(((STRING)::List_2))
 in (LrTable.NT 45,(result,COMMA1left,List_21right),rest671) end
| (240,rest671) => let val result=MlyValue.List_2(([]))
 in (LrTable.NT 45,(result,defaultPos,defaultPos),rest671) end
| (241,(_,(MlyValue.List_3 List_3,_,List_31right))::(_,(
MlyValue.type_attribute type_attribute,type_attribute1left,_))::
rest671) => let val result=MlyValue.Plus_List_3((
(type_attribute)::List_3))
 in (LrTable.NT 48,(result,type_attribute1left,List_31right),rest671)
 end
| (242,(_,(MlyValue.List_3 List_3,_,List_31right))::(_,(
MlyValue.type_attribute type_attribute,_,_))::(_,(_,COMMA1left,_))::
rest671) => let val result=MlyValue.List_3(((type_attribute)::List_3))
 in (LrTable.NT 47,(result,COMMA1left,List_31right),rest671) end
| (243,rest671) => let val result=MlyValue.List_3(([]))
 in (LrTable.NT 47,(result,defaultPos,defaultPos),rest671) end
| (244,(_,(MlyValue.List_4 List_4,_,List_41right))::(_,(
MlyValue.declarator declarator,declarator1left,_))::rest671) => let 
val result=MlyValue.Plus_List_4(((declarator)::List_4))
 in (LrTable.NT 50,(result,declarator1left,List_41right),rest671) end
| (245,(_,(MlyValue.List_4 List_4,_,List_41right))::(_,(
MlyValue.declarator declarator,_,_))::(_,(_,COMMA1left,_))::rest671)
 => let val result=MlyValue.List_4(((declarator)::List_4))
 in (LrTable.NT 49,(result,COMMA1left,List_41right),rest671) end
| (246,rest671) => let val result=MlyValue.List_4(([]))
 in (LrTable.NT 49,(result,defaultPos,defaultPos),rest671) end
| (247,(_,(MlyValue.List_5 List_5,_,List_51right))::(_,(
MlyValue.operation_attribute operation_attribute,
operation_attribute1left,_))::rest671) => let val result=
MlyValue.Plus_List_5(((operation_attribute)::List_5))
 in (LrTable.NT 52,(result,operation_attribute1left,List_51right),
rest671) end
| (248,(_,(MlyValue.List_5 List_5,_,List_51right))::(_,(
MlyValue.operation_attribute operation_attribute,_,_))::(_,(_,
COMMA1left,_))::rest671) => let val result=MlyValue.List_5((
(operation_attribute)::List_5))
 in (LrTable.NT 51,(result,COMMA1left,List_51right),rest671) end
| (249,rest671) => let val result=MlyValue.List_5(([]))
 in (LrTable.NT 51,(result,defaultPos,defaultPos),rest671) end
| (250,(_,(MlyValue.List_6 List_6,_,List_61right))::(_,(
MlyValue.ASTERISK ASTERISK,ASTERISK1left,_))::rest671) => let val 
result=MlyValue.List_6(((ASTERISK)::List_6))
 in (LrTable.NT 53,(result,ASTERISK1left,List_61right),rest671) end
| (251,rest671) => let val result=MlyValue.List_6(([]))
 in (LrTable.NT 53,(result,defaultPos,defaultPos),rest671) end
| (252,(_,(MlyValue.List_7 List_7,_,List_71right))::_::(_,(
MlyValue.member member,member1left,_))::rest671) => let val result=
MlyValue.Plus_List_7(((member)::List_7))
 in (LrTable.NT 55,(result,member1left,List_71right),rest671) end
| (253,(_,(MlyValue.List_7 List_7,_,List_71right))::_::(_,(
MlyValue.member member,member1left,_))::rest671) => let val result=
MlyValue.List_7(((member)::List_7))
 in (LrTable.NT 54,(result,member1left,List_71right),rest671) end
| (254,rest671) => let val result=MlyValue.List_7(([]))
 in (LrTable.NT 54,(result,defaultPos,defaultPos),rest671) end
| (255,(_,(MlyValue.List_8 List_8,_,List_81right))::(_,(
MlyValue.identifier identifier,identifier1left,_))::rest671) => let 
val result=MlyValue.Plus_List_8(((identifier)::List_8))
 in (LrTable.NT 57,(result,identifier1left,List_81right),rest671) end
| (256,(_,(MlyValue.List_8 List_8,_,List_81right))::(_,(
MlyValue.identifier identifier,_,_))::(_,(_,COMMA1left,_))::rest671)
 => let val result=MlyValue.List_8(((identifier)::List_8))
 in (LrTable.NT 56,(result,COMMA1left,List_81right),rest671) end
| (257,rest671) => let val result=MlyValue.List_8(([]))
 in (LrTable.NT 56,(result,defaultPos,defaultPos),rest671) end
| (258,(_,(MlyValue.List_9 List_9,_,List_91right))::_::(_,(
MlyValue.member member,member1left,_))::rest671) => let val result=
MlyValue.Plus_List_9(((member)::List_9))
 in (LrTable.NT 59,(result,member1left,List_91right),rest671) end
| (259,(_,(MlyValue.List_9 List_9,_,List_91right))::_::(_,(
MlyValue.member member,member1left,_))::rest671) => let val result=
MlyValue.List_9(((member)::List_9))
 in (LrTable.NT 58,(result,member1left,List_91right),rest671) end
| (260,rest671) => let val result=MlyValue.List_9(([]))
 in (LrTable.NT 58,(result,defaultPos,defaultPos),rest671) end
| (261,(_,(MlyValue.List_10 List_10,_,List_101right))::(_,(
MlyValue.field_attribute field_attribute,field_attribute1left,_))::
rest671) => let val result=MlyValue.Plus_List_10((
(field_attribute)::List_10))
 in (LrTable.NT 61,(result,field_attribute1left,List_101right),rest671
) end
| (262,(_,(MlyValue.List_10 List_10,_,List_101right))::(_,(
MlyValue.field_attribute field_attribute,_,_))::(_,(_,COMMA1left,_))::
rest671) => let val result=MlyValue.List_10((
(field_attribute)::List_10))
 in (LrTable.NT 60,(result,COMMA1left,List_101right),rest671) end
| (263,rest671) => let val result=MlyValue.List_10(([]))
 in (LrTable.NT 60,(result,defaultPos,defaultPos),rest671) end
| (264,(_,(MlyValue.List_11 List_11,_,List_111right))::(_,(
MlyValue.declarator declarator,declarator1left,_))::rest671) => let 
val result=MlyValue.Plus_List_11(((declarator)::List_11))
 in (LrTable.NT 63,(result,declarator1left,List_111right),rest671) end
| (265,(_,(MlyValue.List_11 List_11,_,List_111right))::(_,(
MlyValue.declarator declarator,_,_))::(_,(_,COMMA1left,_))::rest671)
 => let val result=MlyValue.List_11(((declarator)::List_11))
 in (LrTable.NT 62,(result,COMMA1left,List_111right),rest671) end
| (266,rest671) => let val result=MlyValue.List_11(([]))
 in (LrTable.NT 62,(result,defaultPos,defaultPos),rest671) end
| (267,(_,(MlyValue.List_12 List_12,_,List_121right))::(_,(
MlyValue.union_case union_case,union_case1left,_))::rest671) => let 
val result=MlyValue.Plus_List_12(((union_case)::List_12))
 in (LrTable.NT 65,(result,union_case1left,List_121right),rest671) end
| (268,(_,(MlyValue.List_12 List_12,_,List_121right))::(_,(
MlyValue.union_case union_case,union_case1left,_))::rest671) => let 
val result=MlyValue.List_12(((union_case)::List_12))
 in (LrTable.NT 64,(result,union_case1left,List_121right),rest671) end
| (269,rest671) => let val result=MlyValue.List_12(([]))
 in (LrTable.NT 64,(result,defaultPos,defaultPos),rest671) end
| (270,(_,(MlyValue.List_13 List_13,_,List_131right))::(_,(
MlyValue.union_case_ne union_case_ne,union_case_ne1left,_))::rest671)
 => let val result=MlyValue.Plus_List_13(((union_case_ne)::List_13))
 in (LrTable.NT 67,(result,union_case_ne1left,List_131right),rest671)
 end
| (271,(_,(MlyValue.List_13 List_13,_,List_131right))::(_,(
MlyValue.union_case_ne union_case_ne,union_case_ne1left,_))::rest671)
 => let val result=MlyValue.List_13(((union_case_ne)::List_13))
 in (LrTable.NT 66,(result,union_case_ne1left,List_131right),rest671)
 end
| (272,rest671) => let val result=MlyValue.List_13(([]))
 in (LrTable.NT 66,(result,defaultPos,defaultPos),rest671) end
| (273,(_,(MlyValue.List_14 List_14,_,List_141right))::_::(_,(
MlyValue.const_exp const_exp,_,_))::(_,(_,KW_case1left,_))::rest671)
 => let val result=MlyValue.Plus_List_14(((const_exp)::List_14))
 in (LrTable.NT 69,(result,KW_case1left,List_141right),rest671) end
| (274,(_,(MlyValue.List_14 List_14,_,List_141right))::_::(_,(
MlyValue.const_exp const_exp,_,_))::(_,(_,KW_case1left,_))::rest671)
 => let val result=MlyValue.List_14(((const_exp)::List_14))
 in (LrTable.NT 68,(result,KW_case1left,List_141right),rest671) end
| (275,rest671) => let val result=MlyValue.List_14(([]))
 in (LrTable.NT 68,(result,defaultPos,defaultPos),rest671) end
| (276,(_,(MlyValue.List_15 List_15,_,List_151right))::(_,(
MlyValue.const_exp const_exp,const_exp1left,_))::rest671) => let val 
result=MlyValue.Plus_List_15(((const_exp)::List_15))
 in (LrTable.NT 71,(result,const_exp1left,List_151right),rest671) end
| (277,(_,(MlyValue.List_15 List_15,_,List_151right))::(_,(
MlyValue.const_exp const_exp,_,_))::(_,(_,COMMA1left,_))::rest671) => 
let val result=MlyValue.List_15(((const_exp)::List_15))
 in (LrTable.NT 70,(result,COMMA1left,List_151right),rest671) end
| (278,rest671) => let val result=MlyValue.List_15(([]))
 in (LrTable.NT 70,(result,defaultPos,defaultPos),rest671) end
| (279,(_,(MlyValue.List_16 List_16,_,List_161right))::(_,(
MlyValue.param_declarator param_declarator,param_declarator1left,_))::
rest671) => let val result=MlyValue.Plus_List_16((
(param_declarator)::List_16))
 in (LrTable.NT 73,(result,param_declarator1left,List_161right),
rest671) end
| (280,(_,(MlyValue.List_16 List_16,_,List_161right))::(_,(
MlyValue.param_declarator param_declarator,_,_))::(_,(_,COMMA1left,_))
::rest671) => let val result=MlyValue.List_16((
(param_declarator)::List_16))
 in (LrTable.NT 72,(result,COMMA1left,List_161right),rest671) end
| (281,rest671) => let val result=MlyValue.List_16(([]))
 in (LrTable.NT 72,(result,defaultPos,defaultPos),rest671) end
| (282,(_,(MlyValue.List_17 List_17,_,List_171right))::(_,(
MlyValue.param_attribute param_attribute,param_attribute1left,_))::
rest671) => let val result=MlyValue.Plus_List_17((
(param_attribute)::List_17))
 in (LrTable.NT 75,(result,param_attribute1left,List_171right),rest671
) end
| (283,(_,(MlyValue.List_17 List_17,_,List_171right))::(_,(
MlyValue.param_attribute param_attribute,_,_))::(_,(_,COMMA1left,_))::
rest671) => let val result=MlyValue.List_17((
(param_attribute)::List_17))
 in (LrTable.NT 74,(result,COMMA1left,List_171right),rest671) end
| (284,rest671) => let val result=MlyValue.List_17(([]))
 in (LrTable.NT 74,(result,defaultPos,defaultPos),rest671) end
| (285,(_,(MlyValue.List_18 List_18,_,List_181right))::(_,(
MlyValue.attr_var attr_var,attr_var1left,_))::rest671) => let val 
result=MlyValue.Plus_List_18(((attr_var)::List_18))
 in (LrTable.NT 77,(result,attr_var1left,List_181right),rest671) end
| (286,(_,(MlyValue.List_18 List_18,_,List_181right))::(_,(
MlyValue.attr_var attr_var,_,_))::(_,(_,COMMA1left,_))::rest671) => 
let val result=MlyValue.List_18(((attr_var)::List_18))
 in (LrTable.NT 76,(result,COMMA1left,List_181right),rest671) end
| (287,rest671) => let val result=MlyValue.List_18(([]))
 in (LrTable.NT 76,(result,defaultPos,defaultPos),rest671) end
| (288,(_,(MlyValue.List_19 List_19,_,List_191right))::(_,(
MlyValue.attr_var attr_var,attr_var1left,_))::rest671) => let val 
result=MlyValue.Plus_List_19(((attr_var)::List_19))
 in (LrTable.NT 79,(result,attr_var1left,List_191right),rest671) end
| (289,(_,(MlyValue.List_19 List_19,_,List_191right))::(_,(
MlyValue.attr_var attr_var,_,_))::(_,(_,COMMA1left,_))::rest671) => 
let val result=MlyValue.List_19(((attr_var)::List_19))
 in (LrTable.NT 78,(result,COMMA1left,List_191right),rest671) end
| (290,rest671) => let val result=MlyValue.List_19(([]))
 in (LrTable.NT 78,(result,defaultPos,defaultPos),rest671) end
| (291,(_,(MlyValue.List_20 List_20,_,List_201right))::(_,(
MlyValue.attr_var attr_var,attr_var1left,_))::rest671) => let val 
result=MlyValue.Plus_List_20(((attr_var)::List_20))
 in (LrTable.NT 81,(result,attr_var1left,List_201right),rest671) end
| (292,(_,(MlyValue.List_20 List_20,_,List_201right))::(_,(
MlyValue.attr_var attr_var,_,_))::(_,(_,COMMA1left,_))::rest671) => 
let val result=MlyValue.List_20(((attr_var)::List_20))
 in (LrTable.NT 80,(result,COMMA1left,List_201right),rest671) end
| (293,rest671) => let val result=MlyValue.List_20(([]))
 in (LrTable.NT 80,(result,defaultPos,defaultPos),rest671) end
| (294,(_,(MlyValue.List_21 List_21,_,List_211right))::(_,(
MlyValue.attr_var attr_var,attr_var1left,_))::rest671) => let val 
result=MlyValue.Plus_List_21(((attr_var)::List_21))
 in (LrTable.NT 83,(result,attr_var1left,List_211right),rest671) end
| (295,(_,(MlyValue.List_21 List_21,_,List_211right))::(_,(
MlyValue.attr_var attr_var,_,_))::(_,(_,COMMA1left,_))::rest671) => 
let val result=MlyValue.List_21(((attr_var)::List_21))
 in (LrTable.NT 82,(result,COMMA1left,List_211right),rest671) end
| (296,rest671) => let val result=MlyValue.List_21(([]))
 in (LrTable.NT 82,(result,defaultPos,defaultPos),rest671) end
| (297,(_,(MlyValue.List_22 List_22,_,List_221right))::(_,(
MlyValue.attr_var attr_var,attr_var1left,_))::rest671) => let val 
result=MlyValue.Plus_List_22(((attr_var)::List_22))
 in (LrTable.NT 85,(result,attr_var1left,List_221right),rest671) end
| (298,(_,(MlyValue.List_22 List_22,_,List_221right))::(_,(
MlyValue.attr_var attr_var,_,_))::(_,(_,COMMA1left,_))::rest671) => 
let val result=MlyValue.List_22(((attr_var)::List_22))
 in (LrTable.NT 84,(result,COMMA1left,List_221right),rest671) end
| (299,rest671) => let val result=MlyValue.List_22(([]))
 in (LrTable.NT 84,(result,defaultPos,defaultPos),rest671) end
| (300,(_,(MlyValue.List_23 List_23,_,List_231right))::(_,(
MlyValue.attr_var attr_var,attr_var1left,_))::rest671) => let val 
result=MlyValue.Plus_List_23(((attr_var)::List_23))
 in (LrTable.NT 87,(result,attr_var1left,List_231right),rest671) end
| (301,(_,(MlyValue.List_23 List_23,_,List_231right))::(_,(
MlyValue.attr_var attr_var,_,_))::(_,(_,COMMA1left,_))::rest671) => 
let val result=MlyValue.List_23(((attr_var)::List_23))
 in (LrTable.NT 86,(result,COMMA1left,List_231right),rest671) end
| (302,rest671) => let val result=MlyValue.List_23(([]))
 in (LrTable.NT 86,(result,defaultPos,defaultPos),rest671) end
| _ => raise (mlyAction i392)
end
val void = MlyValue.VOID
val extract = fn a => (fn MlyValue.start x => x
| _ => let exception ParseInternal
	in raise ParseInternal end) a 
end
end
structure Tokens : Idl_TOKENS =
struct
type svalue = ParserData.svalue
type ('a,'b) token = ('a,'b) Token.token
fun EOF (p1,p2) = Token.TOKEN (ParserData.LrTable.T 0,(
ParserData.MlyValue.VOID,p1,p2))
fun ID (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 1,(
ParserData.MlyValue.ID i,p1,p2))
fun STRING (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 2,(
ParserData.MlyValue.STRING i,p1,p2))
fun INT32 (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 3,(
ParserData.MlyValue.INT32 i,p1,p2))
fun WORD32 (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 4,(
ParserData.MlyValue.WORD32 i,p1,p2))
fun UUID (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 5,(
ParserData.MlyValue.UUID i,p1,p2))
fun DDOT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 6,(
ParserData.MlyValue.VOID,p1,p2))
fun DOT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 7,(
ParserData.MlyValue.VOID,p1,p2))
fun COMMA (p1,p2) = Token.TOKEN (ParserData.LrTable.T 8,(
ParserData.MlyValue.VOID,p1,p2))
fun LPAREN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 9,(
ParserData.MlyValue.VOID,p1,p2))
fun RPAREN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 10,(
ParserData.MlyValue.VOID,p1,p2))
fun LBRACK (p1,p2) = Token.TOKEN (ParserData.LrTable.T 11,(
ParserData.MlyValue.VOID,p1,p2))
fun RBRACK (p1,p2) = Token.TOKEN (ParserData.LrTable.T 12,(
ParserData.MlyValue.VOID,p1,p2))
fun LBRACE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 13,(
ParserData.MlyValue.VOID,p1,p2))
fun RBRACE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 14,(
ParserData.MlyValue.VOID,p1,p2))
fun SEMI (p1,p2) = Token.TOKEN (ParserData.LrTable.T 15,(
ParserData.MlyValue.VOID,p1,p2))
fun COLON (p1,p2) = Token.TOKEN (ParserData.LrTable.T 16,(
ParserData.MlyValue.VOID,p1,p2))
fun ASTERISK (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 17,(
ParserData.MlyValue.ASTERISK i,p1,p2))
fun QUOTE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 18,(
ParserData.MlyValue.VOID,p1,p2))
fun EQSIGN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 19,(
ParserData.MlyValue.VOID,p1,p2))
fun DASH (p1,p2) = Token.TOKEN (ParserData.LrTable.T 20,(
ParserData.MlyValue.VOID,p1,p2))
fun KW_import (p1,p2) = Token.TOKEN (ParserData.LrTable.T 21,(
ParserData.MlyValue.VOID,p1,p2))
fun KW_const (p1,p2) = Token.TOKEN (ParserData.LrTable.T 22,(
ParserData.MlyValue.VOID,p1,p2))
fun KW_typedef (p1,p2) = Token.TOKEN (ParserData.LrTable.T 23,(
ParserData.MlyValue.VOID,p1,p2))
fun KW_switch (p1,p2) = Token.TOKEN (ParserData.LrTable.T 24,(
ParserData.MlyValue.VOID,p1,p2))
fun KW_case (p1,p2) = Token.TOKEN (ParserData.LrTable.T 25,(
ParserData.MlyValue.VOID,p1,p2))
fun KW_default (p1,p2) = Token.TOKEN (ParserData.LrTable.T 26,(
ParserData.MlyValue.VOID,p1,p2))
fun KW_enum (p1,p2) = Token.TOKEN (ParserData.LrTable.T 27,(
ParserData.MlyValue.VOID,p1,p2))
fun KW_struct (p1,p2) = Token.TOKEN (ParserData.LrTable.T 28,(
ParserData.MlyValue.VOID,p1,p2))
fun KW_union (p1,p2) = Token.TOKEN (ParserData.LrTable.T 29,(
ParserData.MlyValue.VOID,p1,p2))
fun KW_float (p1,p2) = Token.TOKEN (ParserData.LrTable.T 30,(
ParserData.MlyValue.VOID,p1,p2))
fun KW_double (p1,p2) = Token.TOKEN (ParserData.LrTable.T 31,(
ParserData.MlyValue.VOID,p1,p2))
fun KW_hyper (p1,p2) = Token.TOKEN (ParserData.LrTable.T 32,(
ParserData.MlyValue.VOID,p1,p2))
fun KW_unsigned (p1,p2) = Token.TOKEN (ParserData.LrTable.T 33,(
ParserData.MlyValue.VOID,p1,p2))
fun KW_int (p1,p2) = Token.TOKEN (ParserData.LrTable.T 34,(
ParserData.MlyValue.VOID,p1,p2))
fun KW_long (p1,p2) = Token.TOKEN (ParserData.LrTable.T 35,(
ParserData.MlyValue.VOID,p1,p2))
fun KW_short (p1,p2) = Token.TOKEN (ParserData.LrTable.T 36,(
ParserData.MlyValue.VOID,p1,p2))
fun KW_small (p1,p2) = Token.TOKEN (ParserData.LrTable.T 37,(
ParserData.MlyValue.VOID,p1,p2))
fun KW_char (p1,p2) = Token.TOKEN (ParserData.LrTable.T 38,(
ParserData.MlyValue.VOID,p1,p2))
fun KW_boolean (p1,p2) = Token.TOKEN (ParserData.LrTable.T 39,(
ParserData.MlyValue.VOID,p1,p2))
fun KW_byte (p1,p2) = Token.TOKEN (ParserData.LrTable.T 40,(
ParserData.MlyValue.VOID,p1,p2))
fun KW_void (p1,p2) = Token.TOKEN (ParserData.LrTable.T 41,(
ParserData.MlyValue.VOID,p1,p2))
fun KW_wchar_t (p1,p2) = Token.TOKEN (ParserData.LrTable.T 42,(
ParserData.MlyValue.VOID,p1,p2))
fun KW_TRUE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 43,(
ParserData.MlyValue.VOID,p1,p2))
fun KW_FALSE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 44,(
ParserData.MlyValue.VOID,p1,p2))
fun KW_NULL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 45,(
ParserData.MlyValue.VOID,p1,p2))
fun KW_string (p1,p2) = Token.TOKEN (ParserData.LrTable.T 46,(
ParserData.MlyValue.VOID,p1,p2))
fun KW_size_is (p1,p2) = Token.TOKEN (ParserData.LrTable.T 47,(
ParserData.MlyValue.VOID,p1,p2))
fun KW_ref (p1,p2) = Token.TOKEN (ParserData.LrTable.T 48,(
ParserData.MlyValue.VOID,p1,p2))
fun KW_unique (p1,p2) = Token.TOKEN (ParserData.LrTable.T 49,(
ParserData.MlyValue.VOID,p1,p2))
fun KW_ptr (p1,p2) = Token.TOKEN (ParserData.LrTable.T 50,(
ParserData.MlyValue.VOID,p1,p2))
fun KW_in (p1,p2) = Token.TOKEN (ParserData.LrTable.T 51,(
ParserData.MlyValue.VOID,p1,p2))
fun KW_out (p1,p2) = Token.TOKEN (ParserData.LrTable.T 52,(
ParserData.MlyValue.VOID,p1,p2))
fun KW_sml_structure (p1,p2) = Token.TOKEN (ParserData.LrTable.T 53,(
ParserData.MlyValue.VOID,p1,p2))
fun KW_sml_signature (p1,p2) = Token.TOKEN (ParserData.LrTable.T 54,(
ParserData.MlyValue.VOID,p1,p2))
fun KW_clib_name (p1,p2) = Token.TOKEN (ParserData.LrTable.T 55,(
ParserData.MlyValue.VOID,p1,p2))
fun KW_clib_date (p1,p2) = Token.TOKEN (ParserData.LrTable.T 56,(
ParserData.MlyValue.VOID,p1,p2))
fun KW_clib_version (p1,p2) = Token.TOKEN (ParserData.LrTable.T 57,(
ParserData.MlyValue.VOID,p1,p2))
fun KW_sml_type (p1,p2) = Token.TOKEN (ParserData.LrTable.T 58,(
ParserData.MlyValue.VOID,p1,p2))
fun KW_sml_value (p1,p2) = Token.TOKEN (ParserData.LrTable.T 59,(
ParserData.MlyValue.VOID,p1,p2))
fun KW_sml_context (p1,p2) = Token.TOKEN (ParserData.LrTable.T 60,(
ParserData.MlyValue.VOID,p1,p2))
fun KW_exclude (p1,p2) = Token.TOKEN (ParserData.LrTable.T 61,(
ParserData.MlyValue.VOID,p1,p2))
fun KW_abstract (p1,p2) = Token.TOKEN (ParserData.LrTable.T 62,(
ParserData.MlyValue.VOID,p1,p2))
fun KW_cpp_quote (p1,p2) = Token.TOKEN (ParserData.LrTable.T 63,(
ParserData.MlyValue.VOID,p1,p2))
fun KW_pre (p1,p2) = Token.TOKEN (ParserData.LrTable.T 64,(
ParserData.MlyValue.VOID,p1,p2))
fun KW_post (p1,p2) = Token.TOKEN (ParserData.LrTable.T 65,(
ParserData.MlyValue.VOID,p1,p2))
fun KW_call (p1,p2) = Token.TOKEN (ParserData.LrTable.T 66,(
ParserData.MlyValue.VOID,p1,p2))
fun KW_sml_int (p1,p2) = Token.TOKEN (ParserData.LrTable.T 67,(
ParserData.MlyValue.VOID,p1,p2))
fun KW_sml_word (p1,p2) = Token.TOKEN (ParserData.LrTable.T 68,(
ParserData.MlyValue.VOID,p1,p2))
fun KW_error_status_t (p1,p2) = Token.TOKEN (ParserData.LrTable.T 69,(
ParserData.MlyValue.VOID,p1,p2))
fun KW_ISO_LATIN1 (p1,p2) = Token.TOKEN (ParserData.LrTable.T 70,(
ParserData.MlyValue.VOID,p1,p2))
fun KW_ISO_MULTILINGUAL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 71
,(ParserData.MlyValue.VOID,p1,p2))
fun KW_ISO_UCS (p1,p2) = Token.TOKEN (ParserData.LrTable.T 72,(
ParserData.MlyValue.VOID,p1,p2))
fun KW_idempotent (p1,p2) = Token.TOKEN (ParserData.LrTable.T 73,(
ParserData.MlyValue.VOID,p1,p2))
fun KW_broadcast (p1,p2) = Token.TOKEN (ParserData.LrTable.T 74,(
ParserData.MlyValue.VOID,p1,p2))
fun KW_maybe (p1,p2) = Token.TOKEN (ParserData.LrTable.T 75,(
ParserData.MlyValue.VOID,p1,p2))
fun KW_reflect_deletions (p1,p2) = Token.TOKEN (ParserData.LrTable.T 
76,(ParserData.MlyValue.VOID,p1,p2))
fun KW_ignore (p1,p2) = Token.TOKEN (ParserData.LrTable.T 77,(
ParserData.MlyValue.VOID,p1,p2))
fun KW_context_handle (p1,p2) = Token.TOKEN (ParserData.LrTable.T 78,(
ParserData.MlyValue.VOID,p1,p2))
fun KW_first_is (p1,p2) = Token.TOKEN (ParserData.LrTable.T 79,(
ParserData.MlyValue.VOID,p1,p2))
fun KW_last_is (p1,p2) = Token.TOKEN (ParserData.LrTable.T 80,(
ParserData.MlyValue.VOID,p1,p2))
fun KW_length_is (p1,p2) = Token.TOKEN (ParserData.LrTable.T 81,(
ParserData.MlyValue.VOID,p1,p2))
fun KW_min_is (p1,p2) = Token.TOKEN (ParserData.LrTable.T 82,(
ParserData.MlyValue.VOID,p1,p2))
fun KW_max_is (p1,p2) = Token.TOKEN (ParserData.LrTable.T 83,(
ParserData.MlyValue.VOID,p1,p2))
fun KW_transmit_as (p1,p2) = Token.TOKEN (ParserData.LrTable.T 84,(
ParserData.MlyValue.VOID,p1,p2))
fun KW_handle (p1,p2) = Token.TOKEN (ParserData.LrTable.T 85,(
ParserData.MlyValue.VOID,p1,p2))
fun KW_switch_type (p1,p2) = Token.TOKEN (ParserData.LrTable.T 86,(
ParserData.MlyValue.VOID,p1,p2))
fun KW_switch_is (p1,p2) = Token.TOKEN (ParserData.LrTable.T 87,(
ParserData.MlyValue.VOID,p1,p2))
fun KW_handle_t (p1,p2) = Token.TOKEN (ParserData.LrTable.T 88,(
ParserData.MlyValue.VOID,p1,p2))
end
end
